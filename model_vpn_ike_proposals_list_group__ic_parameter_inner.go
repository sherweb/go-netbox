/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.2 (4.1)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// VpnIkeProposalsListGroupIcParameterInner the model 'VpnIkeProposalsListGroupIcParameterInner'
type VpnIkeProposalsListGroupIcParameterInner int32

// List of vpn_ike_proposals_list_group__ic_parameter_inner
const (
	VPNIKEPROPOSALSLISTGROUPICPARAMETERINNER__1 VpnIkeProposalsListGroupIcParameterInner = 1
	VPNIKEPROPOSALSLISTGROUPICPARAMETERINNER__14 VpnIkeProposalsListGroupIcParameterInner = 14
	VPNIKEPROPOSALSLISTGROUPICPARAMETERINNER__15 VpnIkeProposalsListGroupIcParameterInner = 15
	VPNIKEPROPOSALSLISTGROUPICPARAMETERINNER__16 VpnIkeProposalsListGroupIcParameterInner = 16
	VPNIKEPROPOSALSLISTGROUPICPARAMETERINNER__17 VpnIkeProposalsListGroupIcParameterInner = 17
	VPNIKEPROPOSALSLISTGROUPICPARAMETERINNER__18 VpnIkeProposalsListGroupIcParameterInner = 18
	VPNIKEPROPOSALSLISTGROUPICPARAMETERINNER__19 VpnIkeProposalsListGroupIcParameterInner = 19
	VPNIKEPROPOSALSLISTGROUPICPARAMETERINNER__2 VpnIkeProposalsListGroupIcParameterInner = 2
	VPNIKEPROPOSALSLISTGROUPICPARAMETERINNER__20 VpnIkeProposalsListGroupIcParameterInner = 20
	VPNIKEPROPOSALSLISTGROUPICPARAMETERINNER__21 VpnIkeProposalsListGroupIcParameterInner = 21
	VPNIKEPROPOSALSLISTGROUPICPARAMETERINNER__22 VpnIkeProposalsListGroupIcParameterInner = 22
	VPNIKEPROPOSALSLISTGROUPICPARAMETERINNER__23 VpnIkeProposalsListGroupIcParameterInner = 23
	VPNIKEPROPOSALSLISTGROUPICPARAMETERINNER__24 VpnIkeProposalsListGroupIcParameterInner = 24
	VPNIKEPROPOSALSLISTGROUPICPARAMETERINNER__25 VpnIkeProposalsListGroupIcParameterInner = 25
	VPNIKEPROPOSALSLISTGROUPICPARAMETERINNER__26 VpnIkeProposalsListGroupIcParameterInner = 26
	VPNIKEPROPOSALSLISTGROUPICPARAMETERINNER__27 VpnIkeProposalsListGroupIcParameterInner = 27
	VPNIKEPROPOSALSLISTGROUPICPARAMETERINNER__28 VpnIkeProposalsListGroupIcParameterInner = 28
	VPNIKEPROPOSALSLISTGROUPICPARAMETERINNER__29 VpnIkeProposalsListGroupIcParameterInner = 29
	VPNIKEPROPOSALSLISTGROUPICPARAMETERINNER__30 VpnIkeProposalsListGroupIcParameterInner = 30
	VPNIKEPROPOSALSLISTGROUPICPARAMETERINNER__31 VpnIkeProposalsListGroupIcParameterInner = 31
	VPNIKEPROPOSALSLISTGROUPICPARAMETERINNER__32 VpnIkeProposalsListGroupIcParameterInner = 32
	VPNIKEPROPOSALSLISTGROUPICPARAMETERINNER__33 VpnIkeProposalsListGroupIcParameterInner = 33
	VPNIKEPROPOSALSLISTGROUPICPARAMETERINNER__34 VpnIkeProposalsListGroupIcParameterInner = 34
	VPNIKEPROPOSALSLISTGROUPICPARAMETERINNER__5 VpnIkeProposalsListGroupIcParameterInner = 5
)

// All allowed values of VpnIkeProposalsListGroupIcParameterInner enum
var AllowedVpnIkeProposalsListGroupIcParameterInnerEnumValues = []VpnIkeProposalsListGroupIcParameterInner{
	1,
	14,
	15,
	16,
	17,
	18,
	19,
	2,
	20,
	21,
	22,
	23,
	24,
	25,
	26,
	27,
	28,
	29,
	30,
	31,
	32,
	33,
	34,
	5,
}

func (v *VpnIkeProposalsListGroupIcParameterInner) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VpnIkeProposalsListGroupIcParameterInner(value)
	for _, existing := range AllowedVpnIkeProposalsListGroupIcParameterInnerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VpnIkeProposalsListGroupIcParameterInner", value)
}

// NewVpnIkeProposalsListGroupIcParameterInnerFromValue returns a pointer to a valid VpnIkeProposalsListGroupIcParameterInner
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVpnIkeProposalsListGroupIcParameterInnerFromValue(v int32) (*VpnIkeProposalsListGroupIcParameterInner, error) {
	ev := VpnIkeProposalsListGroupIcParameterInner(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VpnIkeProposalsListGroupIcParameterInner: valid values are %v", v, AllowedVpnIkeProposalsListGroupIcParameterInnerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VpnIkeProposalsListGroupIcParameterInner) IsValid() bool {
	for _, existing := range AllowedVpnIkeProposalsListGroupIcParameterInnerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vpn_ike_proposals_list_group__ic_parameter_inner value
func (v VpnIkeProposalsListGroupIcParameterInner) Ptr() *VpnIkeProposalsListGroupIcParameterInner {
	return &v
}

type NullableVpnIkeProposalsListGroupIcParameterInner struct {
	value *VpnIkeProposalsListGroupIcParameterInner
	isSet bool
}

func (v NullableVpnIkeProposalsListGroupIcParameterInner) Get() *VpnIkeProposalsListGroupIcParameterInner {
	return v.value
}

func (v *NullableVpnIkeProposalsListGroupIcParameterInner) Set(val *VpnIkeProposalsListGroupIcParameterInner) {
	v.value = val
	v.isSet = true
}

func (v NullableVpnIkeProposalsListGroupIcParameterInner) IsSet() bool {
	return v.isSet
}

func (v *NullableVpnIkeProposalsListGroupIcParameterInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpnIkeProposalsListGroupIcParameterInner(val *VpnIkeProposalsListGroupIcParameterInner) *NullableVpnIkeProposalsListGroupIcParameterInner {
	return &NullableVpnIkeProposalsListGroupIcParameterInner{value: val, isSet: true}
}

func (v NullableVpnIkeProposalsListGroupIcParameterInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpnIkeProposalsListGroupIcParameterInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

