/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.2 (4.1)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// DcimConsolePortsListDeviceStatusIcParameterInner the model 'DcimConsolePortsListDeviceStatusIcParameterInner'
type DcimConsolePortsListDeviceStatusIcParameterInner string

// List of dcim_console_ports_list_device_status__ic_parameter_inner
const (
	DCIMCONSOLEPORTSLISTDEVICESTATUSICPARAMETERINNER_ACTIVE DcimConsolePortsListDeviceStatusIcParameterInner = "active"
	DCIMCONSOLEPORTSLISTDEVICESTATUSICPARAMETERINNER_DECOMMISSIONING DcimConsolePortsListDeviceStatusIcParameterInner = "decommissioning"
	DCIMCONSOLEPORTSLISTDEVICESTATUSICPARAMETERINNER_FAILED DcimConsolePortsListDeviceStatusIcParameterInner = "failed"
	DCIMCONSOLEPORTSLISTDEVICESTATUSICPARAMETERINNER_INVENTORY DcimConsolePortsListDeviceStatusIcParameterInner = "inventory"
	DCIMCONSOLEPORTSLISTDEVICESTATUSICPARAMETERINNER_OFFLINE DcimConsolePortsListDeviceStatusIcParameterInner = "offline"
	DCIMCONSOLEPORTSLISTDEVICESTATUSICPARAMETERINNER_PLANNED DcimConsolePortsListDeviceStatusIcParameterInner = "planned"
	DCIMCONSOLEPORTSLISTDEVICESTATUSICPARAMETERINNER_STAGED DcimConsolePortsListDeviceStatusIcParameterInner = "staged"
)

// All allowed values of DcimConsolePortsListDeviceStatusIcParameterInner enum
var AllowedDcimConsolePortsListDeviceStatusIcParameterInnerEnumValues = []DcimConsolePortsListDeviceStatusIcParameterInner{
	"active",
	"decommissioning",
	"failed",
	"inventory",
	"offline",
	"planned",
	"staged",
}

func (v *DcimConsolePortsListDeviceStatusIcParameterInner) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DcimConsolePortsListDeviceStatusIcParameterInner(value)
	for _, existing := range AllowedDcimConsolePortsListDeviceStatusIcParameterInnerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DcimConsolePortsListDeviceStatusIcParameterInner", value)
}

// NewDcimConsolePortsListDeviceStatusIcParameterInnerFromValue returns a pointer to a valid DcimConsolePortsListDeviceStatusIcParameterInner
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDcimConsolePortsListDeviceStatusIcParameterInnerFromValue(v string) (*DcimConsolePortsListDeviceStatusIcParameterInner, error) {
	ev := DcimConsolePortsListDeviceStatusIcParameterInner(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DcimConsolePortsListDeviceStatusIcParameterInner: valid values are %v", v, AllowedDcimConsolePortsListDeviceStatusIcParameterInnerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DcimConsolePortsListDeviceStatusIcParameterInner) IsValid() bool {
	for _, existing := range AllowedDcimConsolePortsListDeviceStatusIcParameterInnerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to dcim_console_ports_list_device_status__ic_parameter_inner value
func (v DcimConsolePortsListDeviceStatusIcParameterInner) Ptr() *DcimConsolePortsListDeviceStatusIcParameterInner {
	return &v
}

type NullableDcimConsolePortsListDeviceStatusIcParameterInner struct {
	value *DcimConsolePortsListDeviceStatusIcParameterInner
	isSet bool
}

func (v NullableDcimConsolePortsListDeviceStatusIcParameterInner) Get() *DcimConsolePortsListDeviceStatusIcParameterInner {
	return v.value
}

func (v *NullableDcimConsolePortsListDeviceStatusIcParameterInner) Set(val *DcimConsolePortsListDeviceStatusIcParameterInner) {
	v.value = val
	v.isSet = true
}

func (v NullableDcimConsolePortsListDeviceStatusIcParameterInner) IsSet() bool {
	return v.isSet
}

func (v *NullableDcimConsolePortsListDeviceStatusIcParameterInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDcimConsolePortsListDeviceStatusIcParameterInner(val *DcimConsolePortsListDeviceStatusIcParameterInner) *NullableDcimConsolePortsListDeviceStatusIcParameterInner {
	return &NullableDcimConsolePortsListDeviceStatusIcParameterInner{value: val, isSet: true}
}

func (v NullableDcimConsolePortsListDeviceStatusIcParameterInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDcimConsolePortsListDeviceStatusIcParameterInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

