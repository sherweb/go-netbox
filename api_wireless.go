/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.2 (4.1)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// WirelessAPIService WirelessAPI service
type WirelessAPIService service

type ApiWirelessWirelessLanGroupsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *WirelessAPIService
	wirelessLANGroupRequest *[]WirelessLANGroupRequest
}

func (r ApiWirelessWirelessLanGroupsBulkDestroyRequest) WirelessLANGroupRequest(wirelessLANGroupRequest []WirelessLANGroupRequest) ApiWirelessWirelessLanGroupsBulkDestroyRequest {
	r.wirelessLANGroupRequest = &wirelessLANGroupRequest
	return r
}

func (r ApiWirelessWirelessLanGroupsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.WirelessWirelessLanGroupsBulkDestroyExecute(r)
}

/*
WirelessWirelessLanGroupsBulkDestroy Method for WirelessWirelessLanGroupsBulkDestroy

Delete a list of wireless LAN group objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWirelessWirelessLanGroupsBulkDestroyRequest
*/
func (a *WirelessAPIService) WirelessWirelessLanGroupsBulkDestroy(ctx context.Context) ApiWirelessWirelessLanGroupsBulkDestroyRequest {
	return ApiWirelessWirelessLanGroupsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WirelessAPIService) WirelessWirelessLanGroupsBulkDestroyExecute(r ApiWirelessWirelessLanGroupsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WirelessAPIService.WirelessWirelessLanGroupsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/wireless/wireless-lan-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.wirelessLANGroupRequest == nil {
		return nil, reportError("wirelessLANGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.wirelessLANGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWirelessWirelessLanGroupsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *WirelessAPIService
	wirelessLANGroupRequest *[]WirelessLANGroupRequest
}

func (r ApiWirelessWirelessLanGroupsBulkPartialUpdateRequest) WirelessLANGroupRequest(wirelessLANGroupRequest []WirelessLANGroupRequest) ApiWirelessWirelessLanGroupsBulkPartialUpdateRequest {
	r.wirelessLANGroupRequest = &wirelessLANGroupRequest
	return r
}

func (r ApiWirelessWirelessLanGroupsBulkPartialUpdateRequest) Execute() ([]WirelessLANGroup, *http.Response, error) {
	return r.ApiService.WirelessWirelessLanGroupsBulkPartialUpdateExecute(r)
}

/*
WirelessWirelessLanGroupsBulkPartialUpdate Method for WirelessWirelessLanGroupsBulkPartialUpdate

Patch a list of wireless LAN group objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWirelessWirelessLanGroupsBulkPartialUpdateRequest
*/
func (a *WirelessAPIService) WirelessWirelessLanGroupsBulkPartialUpdate(ctx context.Context) ApiWirelessWirelessLanGroupsBulkPartialUpdateRequest {
	return ApiWirelessWirelessLanGroupsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WirelessLANGroup
func (a *WirelessAPIService) WirelessWirelessLanGroupsBulkPartialUpdateExecute(r ApiWirelessWirelessLanGroupsBulkPartialUpdateRequest) ([]WirelessLANGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WirelessLANGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WirelessAPIService.WirelessWirelessLanGroupsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/wireless/wireless-lan-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.wirelessLANGroupRequest == nil {
		return localVarReturnValue, nil, reportError("wirelessLANGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.wirelessLANGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWirelessWirelessLanGroupsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *WirelessAPIService
	wirelessLANGroupRequest *[]WirelessLANGroupRequest
}

func (r ApiWirelessWirelessLanGroupsBulkUpdateRequest) WirelessLANGroupRequest(wirelessLANGroupRequest []WirelessLANGroupRequest) ApiWirelessWirelessLanGroupsBulkUpdateRequest {
	r.wirelessLANGroupRequest = &wirelessLANGroupRequest
	return r
}

func (r ApiWirelessWirelessLanGroupsBulkUpdateRequest) Execute() ([]WirelessLANGroup, *http.Response, error) {
	return r.ApiService.WirelessWirelessLanGroupsBulkUpdateExecute(r)
}

/*
WirelessWirelessLanGroupsBulkUpdate Method for WirelessWirelessLanGroupsBulkUpdate

Put a list of wireless LAN group objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWirelessWirelessLanGroupsBulkUpdateRequest
*/
func (a *WirelessAPIService) WirelessWirelessLanGroupsBulkUpdate(ctx context.Context) ApiWirelessWirelessLanGroupsBulkUpdateRequest {
	return ApiWirelessWirelessLanGroupsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WirelessLANGroup
func (a *WirelessAPIService) WirelessWirelessLanGroupsBulkUpdateExecute(r ApiWirelessWirelessLanGroupsBulkUpdateRequest) ([]WirelessLANGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WirelessLANGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WirelessAPIService.WirelessWirelessLanGroupsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/wireless/wireless-lan-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.wirelessLANGroupRequest == nil {
		return localVarReturnValue, nil, reportError("wirelessLANGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.wirelessLANGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWirelessWirelessLanGroupsCreateRequest struct {
	ctx context.Context
	ApiService *WirelessAPIService
	writableWirelessLANGroupRequest *WritableWirelessLANGroupRequest
}

func (r ApiWirelessWirelessLanGroupsCreateRequest) WritableWirelessLANGroupRequest(writableWirelessLANGroupRequest WritableWirelessLANGroupRequest) ApiWirelessWirelessLanGroupsCreateRequest {
	r.writableWirelessLANGroupRequest = &writableWirelessLANGroupRequest
	return r
}

func (r ApiWirelessWirelessLanGroupsCreateRequest) Execute() (*WirelessLANGroup, *http.Response, error) {
	return r.ApiService.WirelessWirelessLanGroupsCreateExecute(r)
}

/*
WirelessWirelessLanGroupsCreate Method for WirelessWirelessLanGroupsCreate

Post a list of wireless LAN group objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWirelessWirelessLanGroupsCreateRequest
*/
func (a *WirelessAPIService) WirelessWirelessLanGroupsCreate(ctx context.Context) ApiWirelessWirelessLanGroupsCreateRequest {
	return ApiWirelessWirelessLanGroupsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WirelessLANGroup
func (a *WirelessAPIService) WirelessWirelessLanGroupsCreateExecute(r ApiWirelessWirelessLanGroupsCreateRequest) (*WirelessLANGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WirelessLANGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WirelessAPIService.WirelessWirelessLanGroupsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/wireless/wireless-lan-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableWirelessLANGroupRequest == nil {
		return localVarReturnValue, nil, reportError("writableWirelessLANGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableWirelessLANGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWirelessWirelessLanGroupsDestroyRequest struct {
	ctx context.Context
	ApiService *WirelessAPIService
	id int32
}

func (r ApiWirelessWirelessLanGroupsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.WirelessWirelessLanGroupsDestroyExecute(r)
}

/*
WirelessWirelessLanGroupsDestroy Method for WirelessWirelessLanGroupsDestroy

Delete a wireless LAN group object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this wireless LAN group.
 @return ApiWirelessWirelessLanGroupsDestroyRequest
*/
func (a *WirelessAPIService) WirelessWirelessLanGroupsDestroy(ctx context.Context, id int32) ApiWirelessWirelessLanGroupsDestroyRequest {
	return ApiWirelessWirelessLanGroupsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *WirelessAPIService) WirelessWirelessLanGroupsDestroyExecute(r ApiWirelessWirelessLanGroupsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WirelessAPIService.WirelessWirelessLanGroupsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/wireless/wireless-lan-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWirelessWirelessLanGroupsListRequest struct {
	ctx context.Context
	ApiService *WirelessAPIService
	ancestor *[]string
	ancestorN *[]string
	ancestorId *[]string
	ancestorIdN *[]string
	created *[]time.Time
	createdEmpty *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	createdByRequest *string
	description *[]string
	descriptionEmpty *bool
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNisw *[]string
	id *[]int32
	idEmpty *bool
	idGt *[]int32
	idGte *[]int32
	idLt *[]int32
	idLte *[]int32
	idN *[]int32
	lastUpdated *[]time.Time
	lastUpdatedEmpty *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	modifiedByRequest *string
	name *[]string
	nameEmpty *bool
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNisw *[]string
	offset *int32
	ordering *string
	parent *[]string
	parentN *[]string
	parentId *[]*int32
	parentIdN *[]*int32
	q *string
	slug *[]string
	slugEmpty *bool
	slugIc *[]string
	slugIe *[]string
	slugIew *[]string
	slugIsw *[]string
	slugN *[]string
	slugNic *[]string
	slugNie *[]string
	slugNiew *[]string
	slugNisw *[]string
	tag *[]string
	tagN *[]string
	updatedByRequest *string
}

func (r ApiWirelessWirelessLanGroupsListRequest) Ancestor(ancestor []string) ApiWirelessWirelessLanGroupsListRequest {
	r.ancestor = &ancestor
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) AncestorN(ancestorN []string) ApiWirelessWirelessLanGroupsListRequest {
	r.ancestorN = &ancestorN
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) AncestorId(ancestorId []string) ApiWirelessWirelessLanGroupsListRequest {
	r.ancestorId = &ancestorId
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) AncestorIdN(ancestorIdN []string) ApiWirelessWirelessLanGroupsListRequest {
	r.ancestorIdN = &ancestorIdN
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) Created(created []time.Time) ApiWirelessWirelessLanGroupsListRequest {
	r.created = &created
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) CreatedEmpty(createdEmpty []time.Time) ApiWirelessWirelessLanGroupsListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) CreatedGt(createdGt []time.Time) ApiWirelessWirelessLanGroupsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) CreatedGte(createdGte []time.Time) ApiWirelessWirelessLanGroupsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) CreatedLt(createdLt []time.Time) ApiWirelessWirelessLanGroupsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) CreatedLte(createdLte []time.Time) ApiWirelessWirelessLanGroupsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) CreatedN(createdN []time.Time) ApiWirelessWirelessLanGroupsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) CreatedByRequest(createdByRequest string) ApiWirelessWirelessLanGroupsListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) Description(description []string) ApiWirelessWirelessLanGroupsListRequest {
	r.description = &description
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) DescriptionEmpty(descriptionEmpty bool) ApiWirelessWirelessLanGroupsListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) DescriptionIc(descriptionIc []string) ApiWirelessWirelessLanGroupsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) DescriptionIe(descriptionIe []string) ApiWirelessWirelessLanGroupsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) DescriptionIew(descriptionIew []string) ApiWirelessWirelessLanGroupsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) DescriptionIsw(descriptionIsw []string) ApiWirelessWirelessLanGroupsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) DescriptionN(descriptionN []string) ApiWirelessWirelessLanGroupsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) DescriptionNic(descriptionNic []string) ApiWirelessWirelessLanGroupsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) DescriptionNie(descriptionNie []string) ApiWirelessWirelessLanGroupsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) DescriptionNiew(descriptionNiew []string) ApiWirelessWirelessLanGroupsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) DescriptionNisw(descriptionNisw []string) ApiWirelessWirelessLanGroupsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) Id(id []int32) ApiWirelessWirelessLanGroupsListRequest {
	r.id = &id
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) IdEmpty(idEmpty bool) ApiWirelessWirelessLanGroupsListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) IdGt(idGt []int32) ApiWirelessWirelessLanGroupsListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) IdGte(idGte []int32) ApiWirelessWirelessLanGroupsListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) IdLt(idLt []int32) ApiWirelessWirelessLanGroupsListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) IdLte(idLte []int32) ApiWirelessWirelessLanGroupsListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) IdN(idN []int32) ApiWirelessWirelessLanGroupsListRequest {
	r.idN = &idN
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) LastUpdated(lastUpdated []time.Time) ApiWirelessWirelessLanGroupsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiWirelessWirelessLanGroupsListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiWirelessWirelessLanGroupsListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiWirelessWirelessLanGroupsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiWirelessWirelessLanGroupsListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiWirelessWirelessLanGroupsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiWirelessWirelessLanGroupsListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiWirelessWirelessLanGroupsListRequest) Limit(limit int32) ApiWirelessWirelessLanGroupsListRequest {
	r.limit = &limit
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) ModifiedByRequest(modifiedByRequest string) ApiWirelessWirelessLanGroupsListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) Name(name []string) ApiWirelessWirelessLanGroupsListRequest {
	r.name = &name
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) NameEmpty(nameEmpty bool) ApiWirelessWirelessLanGroupsListRequest {
	r.nameEmpty = &nameEmpty
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) NameIc(nameIc []string) ApiWirelessWirelessLanGroupsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) NameIe(nameIe []string) ApiWirelessWirelessLanGroupsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) NameIew(nameIew []string) ApiWirelessWirelessLanGroupsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) NameIsw(nameIsw []string) ApiWirelessWirelessLanGroupsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) NameN(nameN []string) ApiWirelessWirelessLanGroupsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) NameNic(nameNic []string) ApiWirelessWirelessLanGroupsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) NameNie(nameNie []string) ApiWirelessWirelessLanGroupsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) NameNiew(nameNiew []string) ApiWirelessWirelessLanGroupsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) NameNisw(nameNisw []string) ApiWirelessWirelessLanGroupsListRequest {
	r.nameNisw = &nameNisw
	return r
}

// The initial index from which to return the results.
func (r ApiWirelessWirelessLanGroupsListRequest) Offset(offset int32) ApiWirelessWirelessLanGroupsListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiWirelessWirelessLanGroupsListRequest) Ordering(ordering string) ApiWirelessWirelessLanGroupsListRequest {
	r.ordering = &ordering
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) Parent(parent []string) ApiWirelessWirelessLanGroupsListRequest {
	r.parent = &parent
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) ParentN(parentN []string) ApiWirelessWirelessLanGroupsListRequest {
	r.parentN = &parentN
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) ParentId(parentId []*int32) ApiWirelessWirelessLanGroupsListRequest {
	r.parentId = &parentId
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) ParentIdN(parentIdN []*int32) ApiWirelessWirelessLanGroupsListRequest {
	r.parentIdN = &parentIdN
	return r
}

// Search
func (r ApiWirelessWirelessLanGroupsListRequest) Q(q string) ApiWirelessWirelessLanGroupsListRequest {
	r.q = &q
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) Slug(slug []string) ApiWirelessWirelessLanGroupsListRequest {
	r.slug = &slug
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) SlugEmpty(slugEmpty bool) ApiWirelessWirelessLanGroupsListRequest {
	r.slugEmpty = &slugEmpty
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) SlugIc(slugIc []string) ApiWirelessWirelessLanGroupsListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) SlugIe(slugIe []string) ApiWirelessWirelessLanGroupsListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) SlugIew(slugIew []string) ApiWirelessWirelessLanGroupsListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) SlugIsw(slugIsw []string) ApiWirelessWirelessLanGroupsListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) SlugN(slugN []string) ApiWirelessWirelessLanGroupsListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) SlugNic(slugNic []string) ApiWirelessWirelessLanGroupsListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) SlugNie(slugNie []string) ApiWirelessWirelessLanGroupsListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) SlugNiew(slugNiew []string) ApiWirelessWirelessLanGroupsListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) SlugNisw(slugNisw []string) ApiWirelessWirelessLanGroupsListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) Tag(tag []string) ApiWirelessWirelessLanGroupsListRequest {
	r.tag = &tag
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) TagN(tagN []string) ApiWirelessWirelessLanGroupsListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) UpdatedByRequest(updatedByRequest string) ApiWirelessWirelessLanGroupsListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiWirelessWirelessLanGroupsListRequest) Execute() (*PaginatedWirelessLANGroupList, *http.Response, error) {
	return r.ApiService.WirelessWirelessLanGroupsListExecute(r)
}

/*
WirelessWirelessLanGroupsList Method for WirelessWirelessLanGroupsList

Get a list of wireless LAN group objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWirelessWirelessLanGroupsListRequest
*/
func (a *WirelessAPIService) WirelessWirelessLanGroupsList(ctx context.Context) ApiWirelessWirelessLanGroupsListRequest {
	return ApiWirelessWirelessLanGroupsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedWirelessLANGroupList
func (a *WirelessAPIService) WirelessWirelessLanGroupsListExecute(r ApiWirelessWirelessLanGroupsListRequest) (*PaginatedWirelessLANGroupList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedWirelessLANGroupList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WirelessAPIService.WirelessWirelessLanGroupsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/wireless/wireless-lan-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ancestor != nil {
		t := *r.ancestor
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor", t, "multi")
		}
	}
	if r.ancestorN != nil {
		t := *r.ancestorN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor__n", t, "multi")
		}
	}
	if r.ancestorId != nil {
		t := *r.ancestorId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor_id", t, "multi")
		}
	}
	if r.ancestorIdN != nil {
		t := *r.ancestorIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ancestor_id__n", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name", t, "multi")
		}
	}
	if r.nameEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__empty", r.nameEmpty, "")
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ic", t, "multi")
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__ie", t, "multi")
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__iew", t, "multi")
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__isw", t, "multi")
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__n", t, "multi")
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nic", t, "multi")
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nie", t, "multi")
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__niew", t, "multi")
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "name__nisw", t, "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.parent != nil {
		t := *r.parent
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent", t, "multi")
		}
	}
	if r.parentN != nil {
		t := *r.parentN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent__n", t, "multi")
		}
	}
	if r.parentId != nil {
		t := *r.parentId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id", t, "multi")
		}
	}
	if r.parentIdN != nil {
		t := *r.parentIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parent_id__n", t, "multi")
		}
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug", t, "multi")
		}
	}
	if r.slugEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "slug__empty", r.slugEmpty, "")
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ic", t, "multi")
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__ie", t, "multi")
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__iew", t, "multi")
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__isw", t, "multi")
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__n", t, "multi")
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nic", t, "multi")
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nie", t, "multi")
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__niew", t, "multi")
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "slug__nisw", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWirelessWirelessLanGroupsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *WirelessAPIService
	id int32
	patchedWritableWirelessLANGroupRequest *PatchedWritableWirelessLANGroupRequest
}

func (r ApiWirelessWirelessLanGroupsPartialUpdateRequest) PatchedWritableWirelessLANGroupRequest(patchedWritableWirelessLANGroupRequest PatchedWritableWirelessLANGroupRequest) ApiWirelessWirelessLanGroupsPartialUpdateRequest {
	r.patchedWritableWirelessLANGroupRequest = &patchedWritableWirelessLANGroupRequest
	return r
}

func (r ApiWirelessWirelessLanGroupsPartialUpdateRequest) Execute() (*WirelessLANGroup, *http.Response, error) {
	return r.ApiService.WirelessWirelessLanGroupsPartialUpdateExecute(r)
}

/*
WirelessWirelessLanGroupsPartialUpdate Method for WirelessWirelessLanGroupsPartialUpdate

Patch a wireless LAN group object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this wireless LAN group.
 @return ApiWirelessWirelessLanGroupsPartialUpdateRequest
*/
func (a *WirelessAPIService) WirelessWirelessLanGroupsPartialUpdate(ctx context.Context, id int32) ApiWirelessWirelessLanGroupsPartialUpdateRequest {
	return ApiWirelessWirelessLanGroupsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return WirelessLANGroup
func (a *WirelessAPIService) WirelessWirelessLanGroupsPartialUpdateExecute(r ApiWirelessWirelessLanGroupsPartialUpdateRequest) (*WirelessLANGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WirelessLANGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WirelessAPIService.WirelessWirelessLanGroupsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/wireless/wireless-lan-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableWirelessLANGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWirelessWirelessLanGroupsRetrieveRequest struct {
	ctx context.Context
	ApiService *WirelessAPIService
	id int32
}

func (r ApiWirelessWirelessLanGroupsRetrieveRequest) Execute() (*WirelessLANGroup, *http.Response, error) {
	return r.ApiService.WirelessWirelessLanGroupsRetrieveExecute(r)
}

/*
WirelessWirelessLanGroupsRetrieve Method for WirelessWirelessLanGroupsRetrieve

Get a wireless LAN group object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this wireless LAN group.
 @return ApiWirelessWirelessLanGroupsRetrieveRequest
*/
func (a *WirelessAPIService) WirelessWirelessLanGroupsRetrieve(ctx context.Context, id int32) ApiWirelessWirelessLanGroupsRetrieveRequest {
	return ApiWirelessWirelessLanGroupsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return WirelessLANGroup
func (a *WirelessAPIService) WirelessWirelessLanGroupsRetrieveExecute(r ApiWirelessWirelessLanGroupsRetrieveRequest) (*WirelessLANGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WirelessLANGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WirelessAPIService.WirelessWirelessLanGroupsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/wireless/wireless-lan-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWirelessWirelessLanGroupsUpdateRequest struct {
	ctx context.Context
	ApiService *WirelessAPIService
	id int32
	writableWirelessLANGroupRequest *WritableWirelessLANGroupRequest
}

func (r ApiWirelessWirelessLanGroupsUpdateRequest) WritableWirelessLANGroupRequest(writableWirelessLANGroupRequest WritableWirelessLANGroupRequest) ApiWirelessWirelessLanGroupsUpdateRequest {
	r.writableWirelessLANGroupRequest = &writableWirelessLANGroupRequest
	return r
}

func (r ApiWirelessWirelessLanGroupsUpdateRequest) Execute() (*WirelessLANGroup, *http.Response, error) {
	return r.ApiService.WirelessWirelessLanGroupsUpdateExecute(r)
}

/*
WirelessWirelessLanGroupsUpdate Method for WirelessWirelessLanGroupsUpdate

Put a wireless LAN group object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this wireless LAN group.
 @return ApiWirelessWirelessLanGroupsUpdateRequest
*/
func (a *WirelessAPIService) WirelessWirelessLanGroupsUpdate(ctx context.Context, id int32) ApiWirelessWirelessLanGroupsUpdateRequest {
	return ApiWirelessWirelessLanGroupsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return WirelessLANGroup
func (a *WirelessAPIService) WirelessWirelessLanGroupsUpdateExecute(r ApiWirelessWirelessLanGroupsUpdateRequest) (*WirelessLANGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WirelessLANGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WirelessAPIService.WirelessWirelessLanGroupsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/wireless/wireless-lan-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableWirelessLANGroupRequest == nil {
		return localVarReturnValue, nil, reportError("writableWirelessLANGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableWirelessLANGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWirelessWirelessLansBulkDestroyRequest struct {
	ctx context.Context
	ApiService *WirelessAPIService
	wirelessLANRequest *[]WirelessLANRequest
}

func (r ApiWirelessWirelessLansBulkDestroyRequest) WirelessLANRequest(wirelessLANRequest []WirelessLANRequest) ApiWirelessWirelessLansBulkDestroyRequest {
	r.wirelessLANRequest = &wirelessLANRequest
	return r
}

func (r ApiWirelessWirelessLansBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.WirelessWirelessLansBulkDestroyExecute(r)
}

/*
WirelessWirelessLansBulkDestroy Method for WirelessWirelessLansBulkDestroy

Delete a list of wireless LAN objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWirelessWirelessLansBulkDestroyRequest
*/
func (a *WirelessAPIService) WirelessWirelessLansBulkDestroy(ctx context.Context) ApiWirelessWirelessLansBulkDestroyRequest {
	return ApiWirelessWirelessLansBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WirelessAPIService) WirelessWirelessLansBulkDestroyExecute(r ApiWirelessWirelessLansBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WirelessAPIService.WirelessWirelessLansBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/wireless/wireless-lans/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.wirelessLANRequest == nil {
		return nil, reportError("wirelessLANRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.wirelessLANRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWirelessWirelessLansBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *WirelessAPIService
	wirelessLANRequest *[]WirelessLANRequest
}

func (r ApiWirelessWirelessLansBulkPartialUpdateRequest) WirelessLANRequest(wirelessLANRequest []WirelessLANRequest) ApiWirelessWirelessLansBulkPartialUpdateRequest {
	r.wirelessLANRequest = &wirelessLANRequest
	return r
}

func (r ApiWirelessWirelessLansBulkPartialUpdateRequest) Execute() ([]WirelessLAN, *http.Response, error) {
	return r.ApiService.WirelessWirelessLansBulkPartialUpdateExecute(r)
}

/*
WirelessWirelessLansBulkPartialUpdate Method for WirelessWirelessLansBulkPartialUpdate

Patch a list of wireless LAN objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWirelessWirelessLansBulkPartialUpdateRequest
*/
func (a *WirelessAPIService) WirelessWirelessLansBulkPartialUpdate(ctx context.Context) ApiWirelessWirelessLansBulkPartialUpdateRequest {
	return ApiWirelessWirelessLansBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WirelessLAN
func (a *WirelessAPIService) WirelessWirelessLansBulkPartialUpdateExecute(r ApiWirelessWirelessLansBulkPartialUpdateRequest) ([]WirelessLAN, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WirelessLAN
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WirelessAPIService.WirelessWirelessLansBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/wireless/wireless-lans/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.wirelessLANRequest == nil {
		return localVarReturnValue, nil, reportError("wirelessLANRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.wirelessLANRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWirelessWirelessLansBulkUpdateRequest struct {
	ctx context.Context
	ApiService *WirelessAPIService
	wirelessLANRequest *[]WirelessLANRequest
}

func (r ApiWirelessWirelessLansBulkUpdateRequest) WirelessLANRequest(wirelessLANRequest []WirelessLANRequest) ApiWirelessWirelessLansBulkUpdateRequest {
	r.wirelessLANRequest = &wirelessLANRequest
	return r
}

func (r ApiWirelessWirelessLansBulkUpdateRequest) Execute() ([]WirelessLAN, *http.Response, error) {
	return r.ApiService.WirelessWirelessLansBulkUpdateExecute(r)
}

/*
WirelessWirelessLansBulkUpdate Method for WirelessWirelessLansBulkUpdate

Put a list of wireless LAN objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWirelessWirelessLansBulkUpdateRequest
*/
func (a *WirelessAPIService) WirelessWirelessLansBulkUpdate(ctx context.Context) ApiWirelessWirelessLansBulkUpdateRequest {
	return ApiWirelessWirelessLansBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WirelessLAN
func (a *WirelessAPIService) WirelessWirelessLansBulkUpdateExecute(r ApiWirelessWirelessLansBulkUpdateRequest) ([]WirelessLAN, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WirelessLAN
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WirelessAPIService.WirelessWirelessLansBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/wireless/wireless-lans/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.wirelessLANRequest == nil {
		return localVarReturnValue, nil, reportError("wirelessLANRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.wirelessLANRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWirelessWirelessLansCreateRequest struct {
	ctx context.Context
	ApiService *WirelessAPIService
	writableWirelessLANRequest *WritableWirelessLANRequest
}

func (r ApiWirelessWirelessLansCreateRequest) WritableWirelessLANRequest(writableWirelessLANRequest WritableWirelessLANRequest) ApiWirelessWirelessLansCreateRequest {
	r.writableWirelessLANRequest = &writableWirelessLANRequest
	return r
}

func (r ApiWirelessWirelessLansCreateRequest) Execute() (*WirelessLAN, *http.Response, error) {
	return r.ApiService.WirelessWirelessLansCreateExecute(r)
}

/*
WirelessWirelessLansCreate Method for WirelessWirelessLansCreate

Post a list of wireless LAN objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWirelessWirelessLansCreateRequest
*/
func (a *WirelessAPIService) WirelessWirelessLansCreate(ctx context.Context) ApiWirelessWirelessLansCreateRequest {
	return ApiWirelessWirelessLansCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WirelessLAN
func (a *WirelessAPIService) WirelessWirelessLansCreateExecute(r ApiWirelessWirelessLansCreateRequest) (*WirelessLAN, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WirelessLAN
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WirelessAPIService.WirelessWirelessLansCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/wireless/wireless-lans/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableWirelessLANRequest == nil {
		return localVarReturnValue, nil, reportError("writableWirelessLANRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableWirelessLANRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWirelessWirelessLansDestroyRequest struct {
	ctx context.Context
	ApiService *WirelessAPIService
	id int32
}

func (r ApiWirelessWirelessLansDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.WirelessWirelessLansDestroyExecute(r)
}

/*
WirelessWirelessLansDestroy Method for WirelessWirelessLansDestroy

Delete a wireless LAN object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this wireless LAN.
 @return ApiWirelessWirelessLansDestroyRequest
*/
func (a *WirelessAPIService) WirelessWirelessLansDestroy(ctx context.Context, id int32) ApiWirelessWirelessLansDestroyRequest {
	return ApiWirelessWirelessLansDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *WirelessAPIService) WirelessWirelessLansDestroyExecute(r ApiWirelessWirelessLansDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WirelessAPIService.WirelessWirelessLansDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/wireless/wireless-lans/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWirelessWirelessLansListRequest struct {
	ctx context.Context
	ApiService *WirelessAPIService
	authCipher *[]string
	authCipherEmpty *bool
	authCipherIc *[]AuthenticationCipher
	authCipherIe *[]AuthenticationCipher
	authCipherIew *[]AuthenticationCipher
	authCipherIsw *[]AuthenticationCipher
	authCipherN *[]AuthenticationCipher
	authCipherNic *[]AuthenticationCipher
	authCipherNie *[]AuthenticationCipher
	authCipherNiew *[]AuthenticationCipher
	authCipherNisw *[]AuthenticationCipher
	authPsk *[]string
	authPskEmpty *bool
	authPskIc *[]string
	authPskIe *[]string
	authPskIew *[]string
	authPskIsw *[]string
	authPskN *[]string
	authPskNic *[]string
	authPskNie *[]string
	authPskNiew *[]string
	authPskNisw *[]string
	authType *[]string
	authTypeEmpty *bool
	authTypeIc *[]AuthenticationType1
	authTypeIe *[]AuthenticationType1
	authTypeIew *[]AuthenticationType1
	authTypeIsw *[]AuthenticationType1
	authTypeN *[]AuthenticationType1
	authTypeNic *[]AuthenticationType1
	authTypeNie *[]AuthenticationType1
	authTypeNiew *[]AuthenticationType1
	authTypeNisw *[]AuthenticationType1
	created *[]time.Time
	createdEmpty *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	createdByRequest *string
	description *[]string
	descriptionEmpty *bool
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNisw *[]string
	group *[]string
	groupN *[]string
	groupId *[]string
	groupIdN *[]string
	id *[]int32
	idEmpty *bool
	idGt *[]int32
	idGte *[]int32
	idLt *[]int32
	idLte *[]int32
	idN *[]int32
	interfaceId *[]int32
	interfaceIdN *[]int32
	lastUpdated *[]time.Time
	lastUpdatedEmpty *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	modifiedByRequest *string
	offset *int32
	ordering *string
	q *string
	ssid *[]string
	ssidEmpty *bool
	ssidIc *[]string
	ssidIe *[]string
	ssidIew *[]string
	ssidIsw *[]string
	ssidN *[]string
	ssidNic *[]string
	ssidNie *[]string
	ssidNiew *[]string
	ssidNisw *[]string
	status *[]string
	statusEmpty *bool
	statusIc *[]WirelessWirelessLansListStatusIcParameterInner
	statusIe *[]WirelessWirelessLansListStatusIcParameterInner
	statusIew *[]WirelessWirelessLansListStatusIcParameterInner
	statusIsw *[]WirelessWirelessLansListStatusIcParameterInner
	statusN *[]WirelessWirelessLansListStatusIcParameterInner
	statusNic *[]WirelessWirelessLansListStatusIcParameterInner
	statusNie *[]WirelessWirelessLansListStatusIcParameterInner
	statusNiew *[]WirelessWirelessLansListStatusIcParameterInner
	statusNisw *[]WirelessWirelessLansListStatusIcParameterInner
	tag *[]string
	tagN *[]string
	tenant *[]string
	tenantN *[]string
	tenantGroup *[]string
	tenantGroupN *[]string
	tenantGroupId *[]string
	tenantGroupIdN *[]string
	tenantId *[]*int32
	tenantIdN *[]*int32
	updatedByRequest *string
	vlanId *[]*int32
	vlanIdN *[]*int32
}

func (r ApiWirelessWirelessLansListRequest) AuthCipher(authCipher []string) ApiWirelessWirelessLansListRequest {
	r.authCipher = &authCipher
	return r
}

func (r ApiWirelessWirelessLansListRequest) AuthCipherEmpty(authCipherEmpty bool) ApiWirelessWirelessLansListRequest {
	r.authCipherEmpty = &authCipherEmpty
	return r
}

// * &#x60;auto&#x60; - Auto * &#x60;tkip&#x60; - TKIP * &#x60;aes&#x60; - AES
func (r ApiWirelessWirelessLansListRequest) AuthCipherIc(authCipherIc []AuthenticationCipher) ApiWirelessWirelessLansListRequest {
	r.authCipherIc = &authCipherIc
	return r
}

// * &#x60;auto&#x60; - Auto * &#x60;tkip&#x60; - TKIP * &#x60;aes&#x60; - AES
func (r ApiWirelessWirelessLansListRequest) AuthCipherIe(authCipherIe []AuthenticationCipher) ApiWirelessWirelessLansListRequest {
	r.authCipherIe = &authCipherIe
	return r
}

// * &#x60;auto&#x60; - Auto * &#x60;tkip&#x60; - TKIP * &#x60;aes&#x60; - AES
func (r ApiWirelessWirelessLansListRequest) AuthCipherIew(authCipherIew []AuthenticationCipher) ApiWirelessWirelessLansListRequest {
	r.authCipherIew = &authCipherIew
	return r
}

// * &#x60;auto&#x60; - Auto * &#x60;tkip&#x60; - TKIP * &#x60;aes&#x60; - AES
func (r ApiWirelessWirelessLansListRequest) AuthCipherIsw(authCipherIsw []AuthenticationCipher) ApiWirelessWirelessLansListRequest {
	r.authCipherIsw = &authCipherIsw
	return r
}

// * &#x60;auto&#x60; - Auto * &#x60;tkip&#x60; - TKIP * &#x60;aes&#x60; - AES
func (r ApiWirelessWirelessLansListRequest) AuthCipherN(authCipherN []AuthenticationCipher) ApiWirelessWirelessLansListRequest {
	r.authCipherN = &authCipherN
	return r
}

// * &#x60;auto&#x60; - Auto * &#x60;tkip&#x60; - TKIP * &#x60;aes&#x60; - AES
func (r ApiWirelessWirelessLansListRequest) AuthCipherNic(authCipherNic []AuthenticationCipher) ApiWirelessWirelessLansListRequest {
	r.authCipherNic = &authCipherNic
	return r
}

// * &#x60;auto&#x60; - Auto * &#x60;tkip&#x60; - TKIP * &#x60;aes&#x60; - AES
func (r ApiWirelessWirelessLansListRequest) AuthCipherNie(authCipherNie []AuthenticationCipher) ApiWirelessWirelessLansListRequest {
	r.authCipherNie = &authCipherNie
	return r
}

// * &#x60;auto&#x60; - Auto * &#x60;tkip&#x60; - TKIP * &#x60;aes&#x60; - AES
func (r ApiWirelessWirelessLansListRequest) AuthCipherNiew(authCipherNiew []AuthenticationCipher) ApiWirelessWirelessLansListRequest {
	r.authCipherNiew = &authCipherNiew
	return r
}

// * &#x60;auto&#x60; - Auto * &#x60;tkip&#x60; - TKIP * &#x60;aes&#x60; - AES
func (r ApiWirelessWirelessLansListRequest) AuthCipherNisw(authCipherNisw []AuthenticationCipher) ApiWirelessWirelessLansListRequest {
	r.authCipherNisw = &authCipherNisw
	return r
}

func (r ApiWirelessWirelessLansListRequest) AuthPsk(authPsk []string) ApiWirelessWirelessLansListRequest {
	r.authPsk = &authPsk
	return r
}

func (r ApiWirelessWirelessLansListRequest) AuthPskEmpty(authPskEmpty bool) ApiWirelessWirelessLansListRequest {
	r.authPskEmpty = &authPskEmpty
	return r
}

func (r ApiWirelessWirelessLansListRequest) AuthPskIc(authPskIc []string) ApiWirelessWirelessLansListRequest {
	r.authPskIc = &authPskIc
	return r
}

func (r ApiWirelessWirelessLansListRequest) AuthPskIe(authPskIe []string) ApiWirelessWirelessLansListRequest {
	r.authPskIe = &authPskIe
	return r
}

func (r ApiWirelessWirelessLansListRequest) AuthPskIew(authPskIew []string) ApiWirelessWirelessLansListRequest {
	r.authPskIew = &authPskIew
	return r
}

func (r ApiWirelessWirelessLansListRequest) AuthPskIsw(authPskIsw []string) ApiWirelessWirelessLansListRequest {
	r.authPskIsw = &authPskIsw
	return r
}

func (r ApiWirelessWirelessLansListRequest) AuthPskN(authPskN []string) ApiWirelessWirelessLansListRequest {
	r.authPskN = &authPskN
	return r
}

func (r ApiWirelessWirelessLansListRequest) AuthPskNic(authPskNic []string) ApiWirelessWirelessLansListRequest {
	r.authPskNic = &authPskNic
	return r
}

func (r ApiWirelessWirelessLansListRequest) AuthPskNie(authPskNie []string) ApiWirelessWirelessLansListRequest {
	r.authPskNie = &authPskNie
	return r
}

func (r ApiWirelessWirelessLansListRequest) AuthPskNiew(authPskNiew []string) ApiWirelessWirelessLansListRequest {
	r.authPskNiew = &authPskNiew
	return r
}

func (r ApiWirelessWirelessLansListRequest) AuthPskNisw(authPskNisw []string) ApiWirelessWirelessLansListRequest {
	r.authPskNisw = &authPskNisw
	return r
}

func (r ApiWirelessWirelessLansListRequest) AuthType(authType []string) ApiWirelessWirelessLansListRequest {
	r.authType = &authType
	return r
}

func (r ApiWirelessWirelessLansListRequest) AuthTypeEmpty(authTypeEmpty bool) ApiWirelessWirelessLansListRequest {
	r.authTypeEmpty = &authTypeEmpty
	return r
}

// * &#x60;open&#x60; - Open * &#x60;wep&#x60; - WEP * &#x60;wpa-personal&#x60; - WPA Personal (PSK) * &#x60;wpa-enterprise&#x60; - WPA Enterprise
func (r ApiWirelessWirelessLansListRequest) AuthTypeIc(authTypeIc []AuthenticationType1) ApiWirelessWirelessLansListRequest {
	r.authTypeIc = &authTypeIc
	return r
}

// * &#x60;open&#x60; - Open * &#x60;wep&#x60; - WEP * &#x60;wpa-personal&#x60; - WPA Personal (PSK) * &#x60;wpa-enterprise&#x60; - WPA Enterprise
func (r ApiWirelessWirelessLansListRequest) AuthTypeIe(authTypeIe []AuthenticationType1) ApiWirelessWirelessLansListRequest {
	r.authTypeIe = &authTypeIe
	return r
}

// * &#x60;open&#x60; - Open * &#x60;wep&#x60; - WEP * &#x60;wpa-personal&#x60; - WPA Personal (PSK) * &#x60;wpa-enterprise&#x60; - WPA Enterprise
func (r ApiWirelessWirelessLansListRequest) AuthTypeIew(authTypeIew []AuthenticationType1) ApiWirelessWirelessLansListRequest {
	r.authTypeIew = &authTypeIew
	return r
}

// * &#x60;open&#x60; - Open * &#x60;wep&#x60; - WEP * &#x60;wpa-personal&#x60; - WPA Personal (PSK) * &#x60;wpa-enterprise&#x60; - WPA Enterprise
func (r ApiWirelessWirelessLansListRequest) AuthTypeIsw(authTypeIsw []AuthenticationType1) ApiWirelessWirelessLansListRequest {
	r.authTypeIsw = &authTypeIsw
	return r
}

// * &#x60;open&#x60; - Open * &#x60;wep&#x60; - WEP * &#x60;wpa-personal&#x60; - WPA Personal (PSK) * &#x60;wpa-enterprise&#x60; - WPA Enterprise
func (r ApiWirelessWirelessLansListRequest) AuthTypeN(authTypeN []AuthenticationType1) ApiWirelessWirelessLansListRequest {
	r.authTypeN = &authTypeN
	return r
}

// * &#x60;open&#x60; - Open * &#x60;wep&#x60; - WEP * &#x60;wpa-personal&#x60; - WPA Personal (PSK) * &#x60;wpa-enterprise&#x60; - WPA Enterprise
func (r ApiWirelessWirelessLansListRequest) AuthTypeNic(authTypeNic []AuthenticationType1) ApiWirelessWirelessLansListRequest {
	r.authTypeNic = &authTypeNic
	return r
}

// * &#x60;open&#x60; - Open * &#x60;wep&#x60; - WEP * &#x60;wpa-personal&#x60; - WPA Personal (PSK) * &#x60;wpa-enterprise&#x60; - WPA Enterprise
func (r ApiWirelessWirelessLansListRequest) AuthTypeNie(authTypeNie []AuthenticationType1) ApiWirelessWirelessLansListRequest {
	r.authTypeNie = &authTypeNie
	return r
}

// * &#x60;open&#x60; - Open * &#x60;wep&#x60; - WEP * &#x60;wpa-personal&#x60; - WPA Personal (PSK) * &#x60;wpa-enterprise&#x60; - WPA Enterprise
func (r ApiWirelessWirelessLansListRequest) AuthTypeNiew(authTypeNiew []AuthenticationType1) ApiWirelessWirelessLansListRequest {
	r.authTypeNiew = &authTypeNiew
	return r
}

// * &#x60;open&#x60; - Open * &#x60;wep&#x60; - WEP * &#x60;wpa-personal&#x60; - WPA Personal (PSK) * &#x60;wpa-enterprise&#x60; - WPA Enterprise
func (r ApiWirelessWirelessLansListRequest) AuthTypeNisw(authTypeNisw []AuthenticationType1) ApiWirelessWirelessLansListRequest {
	r.authTypeNisw = &authTypeNisw
	return r
}

func (r ApiWirelessWirelessLansListRequest) Created(created []time.Time) ApiWirelessWirelessLansListRequest {
	r.created = &created
	return r
}

func (r ApiWirelessWirelessLansListRequest) CreatedEmpty(createdEmpty []time.Time) ApiWirelessWirelessLansListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiWirelessWirelessLansListRequest) CreatedGt(createdGt []time.Time) ApiWirelessWirelessLansListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiWirelessWirelessLansListRequest) CreatedGte(createdGte []time.Time) ApiWirelessWirelessLansListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiWirelessWirelessLansListRequest) CreatedLt(createdLt []time.Time) ApiWirelessWirelessLansListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiWirelessWirelessLansListRequest) CreatedLte(createdLte []time.Time) ApiWirelessWirelessLansListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiWirelessWirelessLansListRequest) CreatedN(createdN []time.Time) ApiWirelessWirelessLansListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiWirelessWirelessLansListRequest) CreatedByRequest(createdByRequest string) ApiWirelessWirelessLansListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiWirelessWirelessLansListRequest) Description(description []string) ApiWirelessWirelessLansListRequest {
	r.description = &description
	return r
}

func (r ApiWirelessWirelessLansListRequest) DescriptionEmpty(descriptionEmpty bool) ApiWirelessWirelessLansListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiWirelessWirelessLansListRequest) DescriptionIc(descriptionIc []string) ApiWirelessWirelessLansListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiWirelessWirelessLansListRequest) DescriptionIe(descriptionIe []string) ApiWirelessWirelessLansListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiWirelessWirelessLansListRequest) DescriptionIew(descriptionIew []string) ApiWirelessWirelessLansListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiWirelessWirelessLansListRequest) DescriptionIsw(descriptionIsw []string) ApiWirelessWirelessLansListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiWirelessWirelessLansListRequest) DescriptionN(descriptionN []string) ApiWirelessWirelessLansListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiWirelessWirelessLansListRequest) DescriptionNic(descriptionNic []string) ApiWirelessWirelessLansListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiWirelessWirelessLansListRequest) DescriptionNie(descriptionNie []string) ApiWirelessWirelessLansListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiWirelessWirelessLansListRequest) DescriptionNiew(descriptionNiew []string) ApiWirelessWirelessLansListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiWirelessWirelessLansListRequest) DescriptionNisw(descriptionNisw []string) ApiWirelessWirelessLansListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiWirelessWirelessLansListRequest) Group(group []string) ApiWirelessWirelessLansListRequest {
	r.group = &group
	return r
}

func (r ApiWirelessWirelessLansListRequest) GroupN(groupN []string) ApiWirelessWirelessLansListRequest {
	r.groupN = &groupN
	return r
}

func (r ApiWirelessWirelessLansListRequest) GroupId(groupId []string) ApiWirelessWirelessLansListRequest {
	r.groupId = &groupId
	return r
}

func (r ApiWirelessWirelessLansListRequest) GroupIdN(groupIdN []string) ApiWirelessWirelessLansListRequest {
	r.groupIdN = &groupIdN
	return r
}

func (r ApiWirelessWirelessLansListRequest) Id(id []int32) ApiWirelessWirelessLansListRequest {
	r.id = &id
	return r
}

func (r ApiWirelessWirelessLansListRequest) IdEmpty(idEmpty bool) ApiWirelessWirelessLansListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiWirelessWirelessLansListRequest) IdGt(idGt []int32) ApiWirelessWirelessLansListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiWirelessWirelessLansListRequest) IdGte(idGte []int32) ApiWirelessWirelessLansListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiWirelessWirelessLansListRequest) IdLt(idLt []int32) ApiWirelessWirelessLansListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiWirelessWirelessLansListRequest) IdLte(idLte []int32) ApiWirelessWirelessLansListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiWirelessWirelessLansListRequest) IdN(idN []int32) ApiWirelessWirelessLansListRequest {
	r.idN = &idN
	return r
}

func (r ApiWirelessWirelessLansListRequest) InterfaceId(interfaceId []int32) ApiWirelessWirelessLansListRequest {
	r.interfaceId = &interfaceId
	return r
}

func (r ApiWirelessWirelessLansListRequest) InterfaceIdN(interfaceIdN []int32) ApiWirelessWirelessLansListRequest {
	r.interfaceIdN = &interfaceIdN
	return r
}

func (r ApiWirelessWirelessLansListRequest) LastUpdated(lastUpdated []time.Time) ApiWirelessWirelessLansListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiWirelessWirelessLansListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiWirelessWirelessLansListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiWirelessWirelessLansListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiWirelessWirelessLansListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiWirelessWirelessLansListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiWirelessWirelessLansListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiWirelessWirelessLansListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiWirelessWirelessLansListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiWirelessWirelessLansListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiWirelessWirelessLansListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiWirelessWirelessLansListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiWirelessWirelessLansListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiWirelessWirelessLansListRequest) Limit(limit int32) ApiWirelessWirelessLansListRequest {
	r.limit = &limit
	return r
}

func (r ApiWirelessWirelessLansListRequest) ModifiedByRequest(modifiedByRequest string) ApiWirelessWirelessLansListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// The initial index from which to return the results.
func (r ApiWirelessWirelessLansListRequest) Offset(offset int32) ApiWirelessWirelessLansListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiWirelessWirelessLansListRequest) Ordering(ordering string) ApiWirelessWirelessLansListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiWirelessWirelessLansListRequest) Q(q string) ApiWirelessWirelessLansListRequest {
	r.q = &q
	return r
}

func (r ApiWirelessWirelessLansListRequest) Ssid(ssid []string) ApiWirelessWirelessLansListRequest {
	r.ssid = &ssid
	return r
}

func (r ApiWirelessWirelessLansListRequest) SsidEmpty(ssidEmpty bool) ApiWirelessWirelessLansListRequest {
	r.ssidEmpty = &ssidEmpty
	return r
}

func (r ApiWirelessWirelessLansListRequest) SsidIc(ssidIc []string) ApiWirelessWirelessLansListRequest {
	r.ssidIc = &ssidIc
	return r
}

func (r ApiWirelessWirelessLansListRequest) SsidIe(ssidIe []string) ApiWirelessWirelessLansListRequest {
	r.ssidIe = &ssidIe
	return r
}

func (r ApiWirelessWirelessLansListRequest) SsidIew(ssidIew []string) ApiWirelessWirelessLansListRequest {
	r.ssidIew = &ssidIew
	return r
}

func (r ApiWirelessWirelessLansListRequest) SsidIsw(ssidIsw []string) ApiWirelessWirelessLansListRequest {
	r.ssidIsw = &ssidIsw
	return r
}

func (r ApiWirelessWirelessLansListRequest) SsidN(ssidN []string) ApiWirelessWirelessLansListRequest {
	r.ssidN = &ssidN
	return r
}

func (r ApiWirelessWirelessLansListRequest) SsidNic(ssidNic []string) ApiWirelessWirelessLansListRequest {
	r.ssidNic = &ssidNic
	return r
}

func (r ApiWirelessWirelessLansListRequest) SsidNie(ssidNie []string) ApiWirelessWirelessLansListRequest {
	r.ssidNie = &ssidNie
	return r
}

func (r ApiWirelessWirelessLansListRequest) SsidNiew(ssidNiew []string) ApiWirelessWirelessLansListRequest {
	r.ssidNiew = &ssidNiew
	return r
}

func (r ApiWirelessWirelessLansListRequest) SsidNisw(ssidNisw []string) ApiWirelessWirelessLansListRequest {
	r.ssidNisw = &ssidNisw
	return r
}

func (r ApiWirelessWirelessLansListRequest) Status(status []string) ApiWirelessWirelessLansListRequest {
	r.status = &status
	return r
}

func (r ApiWirelessWirelessLansListRequest) StatusEmpty(statusEmpty bool) ApiWirelessWirelessLansListRequest {
	r.statusEmpty = &statusEmpty
	return r
}

// * &#x60;active&#x60; - Active * &#x60;reserved&#x60; - Reserved * &#x60;disabled&#x60; - Disabled * &#x60;deprecated&#x60; - Deprecated
func (r ApiWirelessWirelessLansListRequest) StatusIc(statusIc []WirelessWirelessLansListStatusIcParameterInner) ApiWirelessWirelessLansListRequest {
	r.statusIc = &statusIc
	return r
}

// * &#x60;active&#x60; - Active * &#x60;reserved&#x60; - Reserved * &#x60;disabled&#x60; - Disabled * &#x60;deprecated&#x60; - Deprecated
func (r ApiWirelessWirelessLansListRequest) StatusIe(statusIe []WirelessWirelessLansListStatusIcParameterInner) ApiWirelessWirelessLansListRequest {
	r.statusIe = &statusIe
	return r
}

// * &#x60;active&#x60; - Active * &#x60;reserved&#x60; - Reserved * &#x60;disabled&#x60; - Disabled * &#x60;deprecated&#x60; - Deprecated
func (r ApiWirelessWirelessLansListRequest) StatusIew(statusIew []WirelessWirelessLansListStatusIcParameterInner) ApiWirelessWirelessLansListRequest {
	r.statusIew = &statusIew
	return r
}

// * &#x60;active&#x60; - Active * &#x60;reserved&#x60; - Reserved * &#x60;disabled&#x60; - Disabled * &#x60;deprecated&#x60; - Deprecated
func (r ApiWirelessWirelessLansListRequest) StatusIsw(statusIsw []WirelessWirelessLansListStatusIcParameterInner) ApiWirelessWirelessLansListRequest {
	r.statusIsw = &statusIsw
	return r
}

// * &#x60;active&#x60; - Active * &#x60;reserved&#x60; - Reserved * &#x60;disabled&#x60; - Disabled * &#x60;deprecated&#x60; - Deprecated
func (r ApiWirelessWirelessLansListRequest) StatusN(statusN []WirelessWirelessLansListStatusIcParameterInner) ApiWirelessWirelessLansListRequest {
	r.statusN = &statusN
	return r
}

// * &#x60;active&#x60; - Active * &#x60;reserved&#x60; - Reserved * &#x60;disabled&#x60; - Disabled * &#x60;deprecated&#x60; - Deprecated
func (r ApiWirelessWirelessLansListRequest) StatusNic(statusNic []WirelessWirelessLansListStatusIcParameterInner) ApiWirelessWirelessLansListRequest {
	r.statusNic = &statusNic
	return r
}

// * &#x60;active&#x60; - Active * &#x60;reserved&#x60; - Reserved * &#x60;disabled&#x60; - Disabled * &#x60;deprecated&#x60; - Deprecated
func (r ApiWirelessWirelessLansListRequest) StatusNie(statusNie []WirelessWirelessLansListStatusIcParameterInner) ApiWirelessWirelessLansListRequest {
	r.statusNie = &statusNie
	return r
}

// * &#x60;active&#x60; - Active * &#x60;reserved&#x60; - Reserved * &#x60;disabled&#x60; - Disabled * &#x60;deprecated&#x60; - Deprecated
func (r ApiWirelessWirelessLansListRequest) StatusNiew(statusNiew []WirelessWirelessLansListStatusIcParameterInner) ApiWirelessWirelessLansListRequest {
	r.statusNiew = &statusNiew
	return r
}

// * &#x60;active&#x60; - Active * &#x60;reserved&#x60; - Reserved * &#x60;disabled&#x60; - Disabled * &#x60;deprecated&#x60; - Deprecated
func (r ApiWirelessWirelessLansListRequest) StatusNisw(statusNisw []WirelessWirelessLansListStatusIcParameterInner) ApiWirelessWirelessLansListRequest {
	r.statusNisw = &statusNisw
	return r
}

func (r ApiWirelessWirelessLansListRequest) Tag(tag []string) ApiWirelessWirelessLansListRequest {
	r.tag = &tag
	return r
}

func (r ApiWirelessWirelessLansListRequest) TagN(tagN []string) ApiWirelessWirelessLansListRequest {
	r.tagN = &tagN
	return r
}

// Tenant (slug)
func (r ApiWirelessWirelessLansListRequest) Tenant(tenant []string) ApiWirelessWirelessLansListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (slug)
func (r ApiWirelessWirelessLansListRequest) TenantN(tenantN []string) ApiWirelessWirelessLansListRequest {
	r.tenantN = &tenantN
	return r
}

func (r ApiWirelessWirelessLansListRequest) TenantGroup(tenantGroup []string) ApiWirelessWirelessLansListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

func (r ApiWirelessWirelessLansListRequest) TenantGroupN(tenantGroupN []string) ApiWirelessWirelessLansListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

func (r ApiWirelessWirelessLansListRequest) TenantGroupId(tenantGroupId []string) ApiWirelessWirelessLansListRequest {
	r.tenantGroupId = &tenantGroupId
	return r
}

func (r ApiWirelessWirelessLansListRequest) TenantGroupIdN(tenantGroupIdN []string) ApiWirelessWirelessLansListRequest {
	r.tenantGroupIdN = &tenantGroupIdN
	return r
}

// Tenant (ID)
func (r ApiWirelessWirelessLansListRequest) TenantId(tenantId []*int32) ApiWirelessWirelessLansListRequest {
	r.tenantId = &tenantId
	return r
}

// Tenant (ID)
func (r ApiWirelessWirelessLansListRequest) TenantIdN(tenantIdN []*int32) ApiWirelessWirelessLansListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

func (r ApiWirelessWirelessLansListRequest) UpdatedByRequest(updatedByRequest string) ApiWirelessWirelessLansListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiWirelessWirelessLansListRequest) VlanId(vlanId []*int32) ApiWirelessWirelessLansListRequest {
	r.vlanId = &vlanId
	return r
}

func (r ApiWirelessWirelessLansListRequest) VlanIdN(vlanIdN []*int32) ApiWirelessWirelessLansListRequest {
	r.vlanIdN = &vlanIdN
	return r
}

func (r ApiWirelessWirelessLansListRequest) Execute() (*PaginatedWirelessLANList, *http.Response, error) {
	return r.ApiService.WirelessWirelessLansListExecute(r)
}

/*
WirelessWirelessLansList Method for WirelessWirelessLansList

Get a list of wireless LAN objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWirelessWirelessLansListRequest
*/
func (a *WirelessAPIService) WirelessWirelessLansList(ctx context.Context) ApiWirelessWirelessLansListRequest {
	return ApiWirelessWirelessLansListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedWirelessLANList
func (a *WirelessAPIService) WirelessWirelessLansListExecute(r ApiWirelessWirelessLansListRequest) (*PaginatedWirelessLANList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedWirelessLANList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WirelessAPIService.WirelessWirelessLansList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/wireless/wireless-lans/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.authCipher != nil {
		t := *r.authCipher
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher", t, "multi")
		}
	}
	if r.authCipherEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__empty", r.authCipherEmpty, "")
	}
	if r.authCipherIc != nil {
		t := *r.authCipherIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__ic", t, "multi")
		}
	}
	if r.authCipherIe != nil {
		t := *r.authCipherIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__ie", t, "multi")
		}
	}
	if r.authCipherIew != nil {
		t := *r.authCipherIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__iew", t, "multi")
		}
	}
	if r.authCipherIsw != nil {
		t := *r.authCipherIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__isw", t, "multi")
		}
	}
	if r.authCipherN != nil {
		t := *r.authCipherN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__n", t, "multi")
		}
	}
	if r.authCipherNic != nil {
		t := *r.authCipherNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__nic", t, "multi")
		}
	}
	if r.authCipherNie != nil {
		t := *r.authCipherNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__nie", t, "multi")
		}
	}
	if r.authCipherNiew != nil {
		t := *r.authCipherNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__niew", t, "multi")
		}
	}
	if r.authCipherNisw != nil {
		t := *r.authCipherNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__nisw", t, "multi")
		}
	}
	if r.authPsk != nil {
		t := *r.authPsk
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk", t, "multi")
		}
	}
	if r.authPskEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__empty", r.authPskEmpty, "")
	}
	if r.authPskIc != nil {
		t := *r.authPskIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__ic", t, "multi")
		}
	}
	if r.authPskIe != nil {
		t := *r.authPskIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__ie", t, "multi")
		}
	}
	if r.authPskIew != nil {
		t := *r.authPskIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__iew", t, "multi")
		}
	}
	if r.authPskIsw != nil {
		t := *r.authPskIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__isw", t, "multi")
		}
	}
	if r.authPskN != nil {
		t := *r.authPskN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__n", t, "multi")
		}
	}
	if r.authPskNic != nil {
		t := *r.authPskNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__nic", t, "multi")
		}
	}
	if r.authPskNie != nil {
		t := *r.authPskNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__nie", t, "multi")
		}
	}
	if r.authPskNiew != nil {
		t := *r.authPskNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__niew", t, "multi")
		}
	}
	if r.authPskNisw != nil {
		t := *r.authPskNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__nisw", t, "multi")
		}
	}
	if r.authType != nil {
		t := *r.authType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type", t, "multi")
		}
	}
	if r.authTypeEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__empty", r.authTypeEmpty, "")
	}
	if r.authTypeIc != nil {
		t := *r.authTypeIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__ic", t, "multi")
		}
	}
	if r.authTypeIe != nil {
		t := *r.authTypeIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__ie", t, "multi")
		}
	}
	if r.authTypeIew != nil {
		t := *r.authTypeIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__iew", t, "multi")
		}
	}
	if r.authTypeIsw != nil {
		t := *r.authTypeIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__isw", t, "multi")
		}
	}
	if r.authTypeN != nil {
		t := *r.authTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__n", t, "multi")
		}
	}
	if r.authTypeNic != nil {
		t := *r.authTypeNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__nic", t, "multi")
		}
	}
	if r.authTypeNie != nil {
		t := *r.authTypeNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__nie", t, "multi")
		}
	}
	if r.authTypeNiew != nil {
		t := *r.authTypeNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__niew", t, "multi")
		}
	}
	if r.authTypeNisw != nil {
		t := *r.authTypeNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__nisw", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.group != nil {
		t := *r.group
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group", t, "multi")
		}
	}
	if r.groupN != nil {
		t := *r.groupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group__n", t, "multi")
		}
	}
	if r.groupId != nil {
		t := *r.groupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_id", t, "multi")
		}
	}
	if r.groupIdN != nil {
		t := *r.groupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "group_id__n", t, "multi")
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.interfaceId != nil {
		t := *r.interfaceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interface_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interface_id", t, "multi")
		}
	}
	if r.interfaceIdN != nil {
		t := *r.interfaceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interface_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interface_id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.ssid != nil {
		t := *r.ssid
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ssid", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ssid", t, "multi")
		}
	}
	if r.ssidEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__empty", r.ssidEmpty, "")
	}
	if r.ssidIc != nil {
		t := *r.ssidIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__ic", t, "multi")
		}
	}
	if r.ssidIe != nil {
		t := *r.ssidIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__ie", t, "multi")
		}
	}
	if r.ssidIew != nil {
		t := *r.ssidIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__iew", t, "multi")
		}
	}
	if r.ssidIsw != nil {
		t := *r.ssidIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__isw", t, "multi")
		}
	}
	if r.ssidN != nil {
		t := *r.ssidN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__n", t, "multi")
		}
	}
	if r.ssidNic != nil {
		t := *r.ssidNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__nic", t, "multi")
		}
	}
	if r.ssidNie != nil {
		t := *r.ssidNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__nie", t, "multi")
		}
	}
	if r.ssidNiew != nil {
		t := *r.ssidNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__niew", t, "multi")
		}
	}
	if r.ssidNisw != nil {
		t := *r.ssidNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__nisw", t, "multi")
		}
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "multi")
		}
	}
	if r.statusEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__empty", r.statusEmpty, "")
	}
	if r.statusIc != nil {
		t := *r.statusIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__ic", t, "multi")
		}
	}
	if r.statusIe != nil {
		t := *r.statusIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__ie", t, "multi")
		}
	}
	if r.statusIew != nil {
		t := *r.statusIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__iew", t, "multi")
		}
	}
	if r.statusIsw != nil {
		t := *r.statusIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__isw", t, "multi")
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", t, "multi")
		}
	}
	if r.statusNic != nil {
		t := *r.statusNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__nic", t, "multi")
		}
	}
	if r.statusNie != nil {
		t := *r.statusNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__nie", t, "multi")
		}
	}
	if r.statusNiew != nil {
		t := *r.statusNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__niew", t, "multi")
		}
	}
	if r.statusNisw != nil {
		t := *r.statusNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__nisw", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", t, "multi")
		}
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", t, "multi")
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", t, "multi")
		}
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", t, "multi")
		}
	}
	if r.tenantGroupId != nil {
		t := *r.tenantGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", t, "multi")
		}
	}
	if r.tenantGroupIdN != nil {
		t := *r.tenantGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", t, "multi")
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", t, "multi")
		}
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	if r.vlanId != nil {
		t := *r.vlanId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vlan_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vlan_id", t, "multi")
		}
	}
	if r.vlanIdN != nil {
		t := *r.vlanIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "vlan_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "vlan_id__n", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWirelessWirelessLansPartialUpdateRequest struct {
	ctx context.Context
	ApiService *WirelessAPIService
	id int32
	patchedWritableWirelessLANRequest *PatchedWritableWirelessLANRequest
}

func (r ApiWirelessWirelessLansPartialUpdateRequest) PatchedWritableWirelessLANRequest(patchedWritableWirelessLANRequest PatchedWritableWirelessLANRequest) ApiWirelessWirelessLansPartialUpdateRequest {
	r.patchedWritableWirelessLANRequest = &patchedWritableWirelessLANRequest
	return r
}

func (r ApiWirelessWirelessLansPartialUpdateRequest) Execute() (*WirelessLAN, *http.Response, error) {
	return r.ApiService.WirelessWirelessLansPartialUpdateExecute(r)
}

/*
WirelessWirelessLansPartialUpdate Method for WirelessWirelessLansPartialUpdate

Patch a wireless LAN object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this wireless LAN.
 @return ApiWirelessWirelessLansPartialUpdateRequest
*/
func (a *WirelessAPIService) WirelessWirelessLansPartialUpdate(ctx context.Context, id int32) ApiWirelessWirelessLansPartialUpdateRequest {
	return ApiWirelessWirelessLansPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return WirelessLAN
func (a *WirelessAPIService) WirelessWirelessLansPartialUpdateExecute(r ApiWirelessWirelessLansPartialUpdateRequest) (*WirelessLAN, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WirelessLAN
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WirelessAPIService.WirelessWirelessLansPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/wireless/wireless-lans/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableWirelessLANRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWirelessWirelessLansRetrieveRequest struct {
	ctx context.Context
	ApiService *WirelessAPIService
	id int32
}

func (r ApiWirelessWirelessLansRetrieveRequest) Execute() (*WirelessLAN, *http.Response, error) {
	return r.ApiService.WirelessWirelessLansRetrieveExecute(r)
}

/*
WirelessWirelessLansRetrieve Method for WirelessWirelessLansRetrieve

Get a wireless LAN object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this wireless LAN.
 @return ApiWirelessWirelessLansRetrieveRequest
*/
func (a *WirelessAPIService) WirelessWirelessLansRetrieve(ctx context.Context, id int32) ApiWirelessWirelessLansRetrieveRequest {
	return ApiWirelessWirelessLansRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return WirelessLAN
func (a *WirelessAPIService) WirelessWirelessLansRetrieveExecute(r ApiWirelessWirelessLansRetrieveRequest) (*WirelessLAN, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WirelessLAN
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WirelessAPIService.WirelessWirelessLansRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/wireless/wireless-lans/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWirelessWirelessLansUpdateRequest struct {
	ctx context.Context
	ApiService *WirelessAPIService
	id int32
	writableWirelessLANRequest *WritableWirelessLANRequest
}

func (r ApiWirelessWirelessLansUpdateRequest) WritableWirelessLANRequest(writableWirelessLANRequest WritableWirelessLANRequest) ApiWirelessWirelessLansUpdateRequest {
	r.writableWirelessLANRequest = &writableWirelessLANRequest
	return r
}

func (r ApiWirelessWirelessLansUpdateRequest) Execute() (*WirelessLAN, *http.Response, error) {
	return r.ApiService.WirelessWirelessLansUpdateExecute(r)
}

/*
WirelessWirelessLansUpdate Method for WirelessWirelessLansUpdate

Put a wireless LAN object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this wireless LAN.
 @return ApiWirelessWirelessLansUpdateRequest
*/
func (a *WirelessAPIService) WirelessWirelessLansUpdate(ctx context.Context, id int32) ApiWirelessWirelessLansUpdateRequest {
	return ApiWirelessWirelessLansUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return WirelessLAN
func (a *WirelessAPIService) WirelessWirelessLansUpdateExecute(r ApiWirelessWirelessLansUpdateRequest) (*WirelessLAN, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WirelessLAN
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WirelessAPIService.WirelessWirelessLansUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/wireless/wireless-lans/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableWirelessLANRequest == nil {
		return localVarReturnValue, nil, reportError("writableWirelessLANRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableWirelessLANRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWirelessWirelessLinksBulkDestroyRequest struct {
	ctx context.Context
	ApiService *WirelessAPIService
	wirelessLinkRequest *[]WirelessLinkRequest
}

func (r ApiWirelessWirelessLinksBulkDestroyRequest) WirelessLinkRequest(wirelessLinkRequest []WirelessLinkRequest) ApiWirelessWirelessLinksBulkDestroyRequest {
	r.wirelessLinkRequest = &wirelessLinkRequest
	return r
}

func (r ApiWirelessWirelessLinksBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.WirelessWirelessLinksBulkDestroyExecute(r)
}

/*
WirelessWirelessLinksBulkDestroy Method for WirelessWirelessLinksBulkDestroy

Delete a list of wireless link objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWirelessWirelessLinksBulkDestroyRequest
*/
func (a *WirelessAPIService) WirelessWirelessLinksBulkDestroy(ctx context.Context) ApiWirelessWirelessLinksBulkDestroyRequest {
	return ApiWirelessWirelessLinksBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WirelessAPIService) WirelessWirelessLinksBulkDestroyExecute(r ApiWirelessWirelessLinksBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WirelessAPIService.WirelessWirelessLinksBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/wireless/wireless-links/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.wirelessLinkRequest == nil {
		return nil, reportError("wirelessLinkRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.wirelessLinkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWirelessWirelessLinksBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *WirelessAPIService
	wirelessLinkRequest *[]WirelessLinkRequest
}

func (r ApiWirelessWirelessLinksBulkPartialUpdateRequest) WirelessLinkRequest(wirelessLinkRequest []WirelessLinkRequest) ApiWirelessWirelessLinksBulkPartialUpdateRequest {
	r.wirelessLinkRequest = &wirelessLinkRequest
	return r
}

func (r ApiWirelessWirelessLinksBulkPartialUpdateRequest) Execute() ([]WirelessLink, *http.Response, error) {
	return r.ApiService.WirelessWirelessLinksBulkPartialUpdateExecute(r)
}

/*
WirelessWirelessLinksBulkPartialUpdate Method for WirelessWirelessLinksBulkPartialUpdate

Patch a list of wireless link objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWirelessWirelessLinksBulkPartialUpdateRequest
*/
func (a *WirelessAPIService) WirelessWirelessLinksBulkPartialUpdate(ctx context.Context) ApiWirelessWirelessLinksBulkPartialUpdateRequest {
	return ApiWirelessWirelessLinksBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WirelessLink
func (a *WirelessAPIService) WirelessWirelessLinksBulkPartialUpdateExecute(r ApiWirelessWirelessLinksBulkPartialUpdateRequest) ([]WirelessLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WirelessLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WirelessAPIService.WirelessWirelessLinksBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/wireless/wireless-links/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.wirelessLinkRequest == nil {
		return localVarReturnValue, nil, reportError("wirelessLinkRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.wirelessLinkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWirelessWirelessLinksBulkUpdateRequest struct {
	ctx context.Context
	ApiService *WirelessAPIService
	wirelessLinkRequest *[]WirelessLinkRequest
}

func (r ApiWirelessWirelessLinksBulkUpdateRequest) WirelessLinkRequest(wirelessLinkRequest []WirelessLinkRequest) ApiWirelessWirelessLinksBulkUpdateRequest {
	r.wirelessLinkRequest = &wirelessLinkRequest
	return r
}

func (r ApiWirelessWirelessLinksBulkUpdateRequest) Execute() ([]WirelessLink, *http.Response, error) {
	return r.ApiService.WirelessWirelessLinksBulkUpdateExecute(r)
}

/*
WirelessWirelessLinksBulkUpdate Method for WirelessWirelessLinksBulkUpdate

Put a list of wireless link objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWirelessWirelessLinksBulkUpdateRequest
*/
func (a *WirelessAPIService) WirelessWirelessLinksBulkUpdate(ctx context.Context) ApiWirelessWirelessLinksBulkUpdateRequest {
	return ApiWirelessWirelessLinksBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WirelessLink
func (a *WirelessAPIService) WirelessWirelessLinksBulkUpdateExecute(r ApiWirelessWirelessLinksBulkUpdateRequest) ([]WirelessLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WirelessLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WirelessAPIService.WirelessWirelessLinksBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/wireless/wireless-links/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.wirelessLinkRequest == nil {
		return localVarReturnValue, nil, reportError("wirelessLinkRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.wirelessLinkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWirelessWirelessLinksCreateRequest struct {
	ctx context.Context
	ApiService *WirelessAPIService
	writableWirelessLinkRequest *WritableWirelessLinkRequest
}

func (r ApiWirelessWirelessLinksCreateRequest) WritableWirelessLinkRequest(writableWirelessLinkRequest WritableWirelessLinkRequest) ApiWirelessWirelessLinksCreateRequest {
	r.writableWirelessLinkRequest = &writableWirelessLinkRequest
	return r
}

func (r ApiWirelessWirelessLinksCreateRequest) Execute() (*WirelessLink, *http.Response, error) {
	return r.ApiService.WirelessWirelessLinksCreateExecute(r)
}

/*
WirelessWirelessLinksCreate Method for WirelessWirelessLinksCreate

Post a list of wireless link objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWirelessWirelessLinksCreateRequest
*/
func (a *WirelessAPIService) WirelessWirelessLinksCreate(ctx context.Context) ApiWirelessWirelessLinksCreateRequest {
	return ApiWirelessWirelessLinksCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WirelessLink
func (a *WirelessAPIService) WirelessWirelessLinksCreateExecute(r ApiWirelessWirelessLinksCreateRequest) (*WirelessLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WirelessLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WirelessAPIService.WirelessWirelessLinksCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/wireless/wireless-links/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableWirelessLinkRequest == nil {
		return localVarReturnValue, nil, reportError("writableWirelessLinkRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableWirelessLinkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWirelessWirelessLinksDestroyRequest struct {
	ctx context.Context
	ApiService *WirelessAPIService
	id int32
}

func (r ApiWirelessWirelessLinksDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.WirelessWirelessLinksDestroyExecute(r)
}

/*
WirelessWirelessLinksDestroy Method for WirelessWirelessLinksDestroy

Delete a wireless link object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this wireless link.
 @return ApiWirelessWirelessLinksDestroyRequest
*/
func (a *WirelessAPIService) WirelessWirelessLinksDestroy(ctx context.Context, id int32) ApiWirelessWirelessLinksDestroyRequest {
	return ApiWirelessWirelessLinksDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *WirelessAPIService) WirelessWirelessLinksDestroyExecute(r ApiWirelessWirelessLinksDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WirelessAPIService.WirelessWirelessLinksDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/wireless/wireless-links/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWirelessWirelessLinksListRequest struct {
	ctx context.Context
	ApiService *WirelessAPIService
	authCipher *[]string
	authCipherEmpty *bool
	authCipherIc *[]AuthenticationCipher
	authCipherIe *[]AuthenticationCipher
	authCipherIew *[]AuthenticationCipher
	authCipherIsw *[]AuthenticationCipher
	authCipherN *[]AuthenticationCipher
	authCipherNic *[]AuthenticationCipher
	authCipherNie *[]AuthenticationCipher
	authCipherNiew *[]AuthenticationCipher
	authCipherNisw *[]AuthenticationCipher
	authPsk *[]string
	authPskEmpty *bool
	authPskIc *[]string
	authPskIe *[]string
	authPskIew *[]string
	authPskIsw *[]string
	authPskN *[]string
	authPskNic *[]string
	authPskNie *[]string
	authPskNiew *[]string
	authPskNisw *[]string
	authType *[]string
	authTypeEmpty *bool
	authTypeIc *[]AuthenticationType1
	authTypeIe *[]AuthenticationType1
	authTypeIew *[]AuthenticationType1
	authTypeIsw *[]AuthenticationType1
	authTypeN *[]AuthenticationType1
	authTypeNic *[]AuthenticationType1
	authTypeNie *[]AuthenticationType1
	authTypeNiew *[]AuthenticationType1
	authTypeNisw *[]AuthenticationType1
	created *[]time.Time
	createdEmpty *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	createdByRequest *string
	description *[]string
	descriptionEmpty *bool
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNisw *[]string
	distance *[]float64
	distanceEmpty *bool
	distanceGt *[]float64
	distanceGte *[]float64
	distanceLt *[]float64
	distanceLte *[]float64
	distanceN *[]float64
	distanceUnit *WirelessWirelessLinksListDistanceUnitParameter
	id *[]int32
	idEmpty *bool
	idGt *[]int32
	idGte *[]int32
	idLt *[]int32
	idLte *[]int32
	idN *[]int32
	interfaceAId *[]int32
	interfaceAIdN *[]int32
	interfaceBId *[]int32
	interfaceBIdN *[]int32
	lastUpdated *[]time.Time
	lastUpdatedEmpty *[]time.Time
	lastUpdatedGt *[]time.Time
	lastUpdatedGte *[]time.Time
	lastUpdatedLt *[]time.Time
	lastUpdatedLte *[]time.Time
	lastUpdatedN *[]time.Time
	limit *int32
	modifiedByRequest *string
	offset *int32
	ordering *string
	q *string
	ssid *[]string
	ssidEmpty *bool
	ssidIc *[]string
	ssidIe *[]string
	ssidIew *[]string
	ssidIsw *[]string
	ssidN *[]string
	ssidNic *[]string
	ssidNie *[]string
	ssidNiew *[]string
	ssidNisw *[]string
	status *[]string
	statusEmpty *bool
	statusIc *[]DcimCablesListStatusIcParameterInner
	statusIe *[]DcimCablesListStatusIcParameterInner
	statusIew *[]DcimCablesListStatusIcParameterInner
	statusIsw *[]DcimCablesListStatusIcParameterInner
	statusN *[]DcimCablesListStatusIcParameterInner
	statusNic *[]DcimCablesListStatusIcParameterInner
	statusNie *[]DcimCablesListStatusIcParameterInner
	statusNiew *[]DcimCablesListStatusIcParameterInner
	statusNisw *[]DcimCablesListStatusIcParameterInner
	tag *[]string
	tagN *[]string
	tenant *[]string
	tenantN *[]string
	tenantGroup *[]string
	tenantGroupN *[]string
	tenantGroupId *[]string
	tenantGroupIdN *[]string
	tenantId *[]*int32
	tenantIdN *[]*int32
	updatedByRequest *string
}

func (r ApiWirelessWirelessLinksListRequest) AuthCipher(authCipher []string) ApiWirelessWirelessLinksListRequest {
	r.authCipher = &authCipher
	return r
}

func (r ApiWirelessWirelessLinksListRequest) AuthCipherEmpty(authCipherEmpty bool) ApiWirelessWirelessLinksListRequest {
	r.authCipherEmpty = &authCipherEmpty
	return r
}

// * &#x60;auto&#x60; - Auto * &#x60;tkip&#x60; - TKIP * &#x60;aes&#x60; - AES
func (r ApiWirelessWirelessLinksListRequest) AuthCipherIc(authCipherIc []AuthenticationCipher) ApiWirelessWirelessLinksListRequest {
	r.authCipherIc = &authCipherIc
	return r
}

// * &#x60;auto&#x60; - Auto * &#x60;tkip&#x60; - TKIP * &#x60;aes&#x60; - AES
func (r ApiWirelessWirelessLinksListRequest) AuthCipherIe(authCipherIe []AuthenticationCipher) ApiWirelessWirelessLinksListRequest {
	r.authCipherIe = &authCipherIe
	return r
}

// * &#x60;auto&#x60; - Auto * &#x60;tkip&#x60; - TKIP * &#x60;aes&#x60; - AES
func (r ApiWirelessWirelessLinksListRequest) AuthCipherIew(authCipherIew []AuthenticationCipher) ApiWirelessWirelessLinksListRequest {
	r.authCipherIew = &authCipherIew
	return r
}

// * &#x60;auto&#x60; - Auto * &#x60;tkip&#x60; - TKIP * &#x60;aes&#x60; - AES
func (r ApiWirelessWirelessLinksListRequest) AuthCipherIsw(authCipherIsw []AuthenticationCipher) ApiWirelessWirelessLinksListRequest {
	r.authCipherIsw = &authCipherIsw
	return r
}

// * &#x60;auto&#x60; - Auto * &#x60;tkip&#x60; - TKIP * &#x60;aes&#x60; - AES
func (r ApiWirelessWirelessLinksListRequest) AuthCipherN(authCipherN []AuthenticationCipher) ApiWirelessWirelessLinksListRequest {
	r.authCipherN = &authCipherN
	return r
}

// * &#x60;auto&#x60; - Auto * &#x60;tkip&#x60; - TKIP * &#x60;aes&#x60; - AES
func (r ApiWirelessWirelessLinksListRequest) AuthCipherNic(authCipherNic []AuthenticationCipher) ApiWirelessWirelessLinksListRequest {
	r.authCipherNic = &authCipherNic
	return r
}

// * &#x60;auto&#x60; - Auto * &#x60;tkip&#x60; - TKIP * &#x60;aes&#x60; - AES
func (r ApiWirelessWirelessLinksListRequest) AuthCipherNie(authCipherNie []AuthenticationCipher) ApiWirelessWirelessLinksListRequest {
	r.authCipherNie = &authCipherNie
	return r
}

// * &#x60;auto&#x60; - Auto * &#x60;tkip&#x60; - TKIP * &#x60;aes&#x60; - AES
func (r ApiWirelessWirelessLinksListRequest) AuthCipherNiew(authCipherNiew []AuthenticationCipher) ApiWirelessWirelessLinksListRequest {
	r.authCipherNiew = &authCipherNiew
	return r
}

// * &#x60;auto&#x60; - Auto * &#x60;tkip&#x60; - TKIP * &#x60;aes&#x60; - AES
func (r ApiWirelessWirelessLinksListRequest) AuthCipherNisw(authCipherNisw []AuthenticationCipher) ApiWirelessWirelessLinksListRequest {
	r.authCipherNisw = &authCipherNisw
	return r
}

func (r ApiWirelessWirelessLinksListRequest) AuthPsk(authPsk []string) ApiWirelessWirelessLinksListRequest {
	r.authPsk = &authPsk
	return r
}

func (r ApiWirelessWirelessLinksListRequest) AuthPskEmpty(authPskEmpty bool) ApiWirelessWirelessLinksListRequest {
	r.authPskEmpty = &authPskEmpty
	return r
}

func (r ApiWirelessWirelessLinksListRequest) AuthPskIc(authPskIc []string) ApiWirelessWirelessLinksListRequest {
	r.authPskIc = &authPskIc
	return r
}

func (r ApiWirelessWirelessLinksListRequest) AuthPskIe(authPskIe []string) ApiWirelessWirelessLinksListRequest {
	r.authPskIe = &authPskIe
	return r
}

func (r ApiWirelessWirelessLinksListRequest) AuthPskIew(authPskIew []string) ApiWirelessWirelessLinksListRequest {
	r.authPskIew = &authPskIew
	return r
}

func (r ApiWirelessWirelessLinksListRequest) AuthPskIsw(authPskIsw []string) ApiWirelessWirelessLinksListRequest {
	r.authPskIsw = &authPskIsw
	return r
}

func (r ApiWirelessWirelessLinksListRequest) AuthPskN(authPskN []string) ApiWirelessWirelessLinksListRequest {
	r.authPskN = &authPskN
	return r
}

func (r ApiWirelessWirelessLinksListRequest) AuthPskNic(authPskNic []string) ApiWirelessWirelessLinksListRequest {
	r.authPskNic = &authPskNic
	return r
}

func (r ApiWirelessWirelessLinksListRequest) AuthPskNie(authPskNie []string) ApiWirelessWirelessLinksListRequest {
	r.authPskNie = &authPskNie
	return r
}

func (r ApiWirelessWirelessLinksListRequest) AuthPskNiew(authPskNiew []string) ApiWirelessWirelessLinksListRequest {
	r.authPskNiew = &authPskNiew
	return r
}

func (r ApiWirelessWirelessLinksListRequest) AuthPskNisw(authPskNisw []string) ApiWirelessWirelessLinksListRequest {
	r.authPskNisw = &authPskNisw
	return r
}

func (r ApiWirelessWirelessLinksListRequest) AuthType(authType []string) ApiWirelessWirelessLinksListRequest {
	r.authType = &authType
	return r
}

func (r ApiWirelessWirelessLinksListRequest) AuthTypeEmpty(authTypeEmpty bool) ApiWirelessWirelessLinksListRequest {
	r.authTypeEmpty = &authTypeEmpty
	return r
}

// * &#x60;open&#x60; - Open * &#x60;wep&#x60; - WEP * &#x60;wpa-personal&#x60; - WPA Personal (PSK) * &#x60;wpa-enterprise&#x60; - WPA Enterprise
func (r ApiWirelessWirelessLinksListRequest) AuthTypeIc(authTypeIc []AuthenticationType1) ApiWirelessWirelessLinksListRequest {
	r.authTypeIc = &authTypeIc
	return r
}

// * &#x60;open&#x60; - Open * &#x60;wep&#x60; - WEP * &#x60;wpa-personal&#x60; - WPA Personal (PSK) * &#x60;wpa-enterprise&#x60; - WPA Enterprise
func (r ApiWirelessWirelessLinksListRequest) AuthTypeIe(authTypeIe []AuthenticationType1) ApiWirelessWirelessLinksListRequest {
	r.authTypeIe = &authTypeIe
	return r
}

// * &#x60;open&#x60; - Open * &#x60;wep&#x60; - WEP * &#x60;wpa-personal&#x60; - WPA Personal (PSK) * &#x60;wpa-enterprise&#x60; - WPA Enterprise
func (r ApiWirelessWirelessLinksListRequest) AuthTypeIew(authTypeIew []AuthenticationType1) ApiWirelessWirelessLinksListRequest {
	r.authTypeIew = &authTypeIew
	return r
}

// * &#x60;open&#x60; - Open * &#x60;wep&#x60; - WEP * &#x60;wpa-personal&#x60; - WPA Personal (PSK) * &#x60;wpa-enterprise&#x60; - WPA Enterprise
func (r ApiWirelessWirelessLinksListRequest) AuthTypeIsw(authTypeIsw []AuthenticationType1) ApiWirelessWirelessLinksListRequest {
	r.authTypeIsw = &authTypeIsw
	return r
}

// * &#x60;open&#x60; - Open * &#x60;wep&#x60; - WEP * &#x60;wpa-personal&#x60; - WPA Personal (PSK) * &#x60;wpa-enterprise&#x60; - WPA Enterprise
func (r ApiWirelessWirelessLinksListRequest) AuthTypeN(authTypeN []AuthenticationType1) ApiWirelessWirelessLinksListRequest {
	r.authTypeN = &authTypeN
	return r
}

// * &#x60;open&#x60; - Open * &#x60;wep&#x60; - WEP * &#x60;wpa-personal&#x60; - WPA Personal (PSK) * &#x60;wpa-enterprise&#x60; - WPA Enterprise
func (r ApiWirelessWirelessLinksListRequest) AuthTypeNic(authTypeNic []AuthenticationType1) ApiWirelessWirelessLinksListRequest {
	r.authTypeNic = &authTypeNic
	return r
}

// * &#x60;open&#x60; - Open * &#x60;wep&#x60; - WEP * &#x60;wpa-personal&#x60; - WPA Personal (PSK) * &#x60;wpa-enterprise&#x60; - WPA Enterprise
func (r ApiWirelessWirelessLinksListRequest) AuthTypeNie(authTypeNie []AuthenticationType1) ApiWirelessWirelessLinksListRequest {
	r.authTypeNie = &authTypeNie
	return r
}

// * &#x60;open&#x60; - Open * &#x60;wep&#x60; - WEP * &#x60;wpa-personal&#x60; - WPA Personal (PSK) * &#x60;wpa-enterprise&#x60; - WPA Enterprise
func (r ApiWirelessWirelessLinksListRequest) AuthTypeNiew(authTypeNiew []AuthenticationType1) ApiWirelessWirelessLinksListRequest {
	r.authTypeNiew = &authTypeNiew
	return r
}

// * &#x60;open&#x60; - Open * &#x60;wep&#x60; - WEP * &#x60;wpa-personal&#x60; - WPA Personal (PSK) * &#x60;wpa-enterprise&#x60; - WPA Enterprise
func (r ApiWirelessWirelessLinksListRequest) AuthTypeNisw(authTypeNisw []AuthenticationType1) ApiWirelessWirelessLinksListRequest {
	r.authTypeNisw = &authTypeNisw
	return r
}

func (r ApiWirelessWirelessLinksListRequest) Created(created []time.Time) ApiWirelessWirelessLinksListRequest {
	r.created = &created
	return r
}

func (r ApiWirelessWirelessLinksListRequest) CreatedEmpty(createdEmpty []time.Time) ApiWirelessWirelessLinksListRequest {
	r.createdEmpty = &createdEmpty
	return r
}

func (r ApiWirelessWirelessLinksListRequest) CreatedGt(createdGt []time.Time) ApiWirelessWirelessLinksListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiWirelessWirelessLinksListRequest) CreatedGte(createdGte []time.Time) ApiWirelessWirelessLinksListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiWirelessWirelessLinksListRequest) CreatedLt(createdLt []time.Time) ApiWirelessWirelessLinksListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiWirelessWirelessLinksListRequest) CreatedLte(createdLte []time.Time) ApiWirelessWirelessLinksListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiWirelessWirelessLinksListRequest) CreatedN(createdN []time.Time) ApiWirelessWirelessLinksListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiWirelessWirelessLinksListRequest) CreatedByRequest(createdByRequest string) ApiWirelessWirelessLinksListRequest {
	r.createdByRequest = &createdByRequest
	return r
}

func (r ApiWirelessWirelessLinksListRequest) Description(description []string) ApiWirelessWirelessLinksListRequest {
	r.description = &description
	return r
}

func (r ApiWirelessWirelessLinksListRequest) DescriptionEmpty(descriptionEmpty bool) ApiWirelessWirelessLinksListRequest {
	r.descriptionEmpty = &descriptionEmpty
	return r
}

func (r ApiWirelessWirelessLinksListRequest) DescriptionIc(descriptionIc []string) ApiWirelessWirelessLinksListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiWirelessWirelessLinksListRequest) DescriptionIe(descriptionIe []string) ApiWirelessWirelessLinksListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiWirelessWirelessLinksListRequest) DescriptionIew(descriptionIew []string) ApiWirelessWirelessLinksListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiWirelessWirelessLinksListRequest) DescriptionIsw(descriptionIsw []string) ApiWirelessWirelessLinksListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiWirelessWirelessLinksListRequest) DescriptionN(descriptionN []string) ApiWirelessWirelessLinksListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiWirelessWirelessLinksListRequest) DescriptionNic(descriptionNic []string) ApiWirelessWirelessLinksListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiWirelessWirelessLinksListRequest) DescriptionNie(descriptionNie []string) ApiWirelessWirelessLinksListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiWirelessWirelessLinksListRequest) DescriptionNiew(descriptionNiew []string) ApiWirelessWirelessLinksListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiWirelessWirelessLinksListRequest) DescriptionNisw(descriptionNisw []string) ApiWirelessWirelessLinksListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiWirelessWirelessLinksListRequest) Distance(distance []float64) ApiWirelessWirelessLinksListRequest {
	r.distance = &distance
	return r
}

func (r ApiWirelessWirelessLinksListRequest) DistanceEmpty(distanceEmpty bool) ApiWirelessWirelessLinksListRequest {
	r.distanceEmpty = &distanceEmpty
	return r
}

func (r ApiWirelessWirelessLinksListRequest) DistanceGt(distanceGt []float64) ApiWirelessWirelessLinksListRequest {
	r.distanceGt = &distanceGt
	return r
}

func (r ApiWirelessWirelessLinksListRequest) DistanceGte(distanceGte []float64) ApiWirelessWirelessLinksListRequest {
	r.distanceGte = &distanceGte
	return r
}

func (r ApiWirelessWirelessLinksListRequest) DistanceLt(distanceLt []float64) ApiWirelessWirelessLinksListRequest {
	r.distanceLt = &distanceLt
	return r
}

func (r ApiWirelessWirelessLinksListRequest) DistanceLte(distanceLte []float64) ApiWirelessWirelessLinksListRequest {
	r.distanceLte = &distanceLte
	return r
}

func (r ApiWirelessWirelessLinksListRequest) DistanceN(distanceN []float64) ApiWirelessWirelessLinksListRequest {
	r.distanceN = &distanceN
	return r
}

// * &#x60;km&#x60; - Kilometers * &#x60;m&#x60; - Meters * &#x60;mi&#x60; - Miles * &#x60;ft&#x60; - Feet
func (r ApiWirelessWirelessLinksListRequest) DistanceUnit(distanceUnit WirelessWirelessLinksListDistanceUnitParameter) ApiWirelessWirelessLinksListRequest {
	r.distanceUnit = &distanceUnit
	return r
}

func (r ApiWirelessWirelessLinksListRequest) Id(id []int32) ApiWirelessWirelessLinksListRequest {
	r.id = &id
	return r
}

func (r ApiWirelessWirelessLinksListRequest) IdEmpty(idEmpty bool) ApiWirelessWirelessLinksListRequest {
	r.idEmpty = &idEmpty
	return r
}

func (r ApiWirelessWirelessLinksListRequest) IdGt(idGt []int32) ApiWirelessWirelessLinksListRequest {
	r.idGt = &idGt
	return r
}

func (r ApiWirelessWirelessLinksListRequest) IdGte(idGte []int32) ApiWirelessWirelessLinksListRequest {
	r.idGte = &idGte
	return r
}

func (r ApiWirelessWirelessLinksListRequest) IdLt(idLt []int32) ApiWirelessWirelessLinksListRequest {
	r.idLt = &idLt
	return r
}

func (r ApiWirelessWirelessLinksListRequest) IdLte(idLte []int32) ApiWirelessWirelessLinksListRequest {
	r.idLte = &idLte
	return r
}

func (r ApiWirelessWirelessLinksListRequest) IdN(idN []int32) ApiWirelessWirelessLinksListRequest {
	r.idN = &idN
	return r
}

func (r ApiWirelessWirelessLinksListRequest) InterfaceAId(interfaceAId []int32) ApiWirelessWirelessLinksListRequest {
	r.interfaceAId = &interfaceAId
	return r
}

func (r ApiWirelessWirelessLinksListRequest) InterfaceAIdN(interfaceAIdN []int32) ApiWirelessWirelessLinksListRequest {
	r.interfaceAIdN = &interfaceAIdN
	return r
}

func (r ApiWirelessWirelessLinksListRequest) InterfaceBId(interfaceBId []int32) ApiWirelessWirelessLinksListRequest {
	r.interfaceBId = &interfaceBId
	return r
}

func (r ApiWirelessWirelessLinksListRequest) InterfaceBIdN(interfaceBIdN []int32) ApiWirelessWirelessLinksListRequest {
	r.interfaceBIdN = &interfaceBIdN
	return r
}

func (r ApiWirelessWirelessLinksListRequest) LastUpdated(lastUpdated []time.Time) ApiWirelessWirelessLinksListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiWirelessWirelessLinksListRequest) LastUpdatedEmpty(lastUpdatedEmpty []time.Time) ApiWirelessWirelessLinksListRequest {
	r.lastUpdatedEmpty = &lastUpdatedEmpty
	return r
}

func (r ApiWirelessWirelessLinksListRequest) LastUpdatedGt(lastUpdatedGt []time.Time) ApiWirelessWirelessLinksListRequest {
	r.lastUpdatedGt = &lastUpdatedGt
	return r
}

func (r ApiWirelessWirelessLinksListRequest) LastUpdatedGte(lastUpdatedGte []time.Time) ApiWirelessWirelessLinksListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiWirelessWirelessLinksListRequest) LastUpdatedLt(lastUpdatedLt []time.Time) ApiWirelessWirelessLinksListRequest {
	r.lastUpdatedLt = &lastUpdatedLt
	return r
}

func (r ApiWirelessWirelessLinksListRequest) LastUpdatedLte(lastUpdatedLte []time.Time) ApiWirelessWirelessLinksListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiWirelessWirelessLinksListRequest) LastUpdatedN(lastUpdatedN []time.Time) ApiWirelessWirelessLinksListRequest {
	r.lastUpdatedN = &lastUpdatedN
	return r
}

// Number of results to return per page.
func (r ApiWirelessWirelessLinksListRequest) Limit(limit int32) ApiWirelessWirelessLinksListRequest {
	r.limit = &limit
	return r
}

func (r ApiWirelessWirelessLinksListRequest) ModifiedByRequest(modifiedByRequest string) ApiWirelessWirelessLinksListRequest {
	r.modifiedByRequest = &modifiedByRequest
	return r
}

// The initial index from which to return the results.
func (r ApiWirelessWirelessLinksListRequest) Offset(offset int32) ApiWirelessWirelessLinksListRequest {
	r.offset = &offset
	return r
}

// Which field to use when ordering the results.
func (r ApiWirelessWirelessLinksListRequest) Ordering(ordering string) ApiWirelessWirelessLinksListRequest {
	r.ordering = &ordering
	return r
}

// Search
func (r ApiWirelessWirelessLinksListRequest) Q(q string) ApiWirelessWirelessLinksListRequest {
	r.q = &q
	return r
}

func (r ApiWirelessWirelessLinksListRequest) Ssid(ssid []string) ApiWirelessWirelessLinksListRequest {
	r.ssid = &ssid
	return r
}

func (r ApiWirelessWirelessLinksListRequest) SsidEmpty(ssidEmpty bool) ApiWirelessWirelessLinksListRequest {
	r.ssidEmpty = &ssidEmpty
	return r
}

func (r ApiWirelessWirelessLinksListRequest) SsidIc(ssidIc []string) ApiWirelessWirelessLinksListRequest {
	r.ssidIc = &ssidIc
	return r
}

func (r ApiWirelessWirelessLinksListRequest) SsidIe(ssidIe []string) ApiWirelessWirelessLinksListRequest {
	r.ssidIe = &ssidIe
	return r
}

func (r ApiWirelessWirelessLinksListRequest) SsidIew(ssidIew []string) ApiWirelessWirelessLinksListRequest {
	r.ssidIew = &ssidIew
	return r
}

func (r ApiWirelessWirelessLinksListRequest) SsidIsw(ssidIsw []string) ApiWirelessWirelessLinksListRequest {
	r.ssidIsw = &ssidIsw
	return r
}

func (r ApiWirelessWirelessLinksListRequest) SsidN(ssidN []string) ApiWirelessWirelessLinksListRequest {
	r.ssidN = &ssidN
	return r
}

func (r ApiWirelessWirelessLinksListRequest) SsidNic(ssidNic []string) ApiWirelessWirelessLinksListRequest {
	r.ssidNic = &ssidNic
	return r
}

func (r ApiWirelessWirelessLinksListRequest) SsidNie(ssidNie []string) ApiWirelessWirelessLinksListRequest {
	r.ssidNie = &ssidNie
	return r
}

func (r ApiWirelessWirelessLinksListRequest) SsidNiew(ssidNiew []string) ApiWirelessWirelessLinksListRequest {
	r.ssidNiew = &ssidNiew
	return r
}

func (r ApiWirelessWirelessLinksListRequest) SsidNisw(ssidNisw []string) ApiWirelessWirelessLinksListRequest {
	r.ssidNisw = &ssidNisw
	return r
}

func (r ApiWirelessWirelessLinksListRequest) Status(status []string) ApiWirelessWirelessLinksListRequest {
	r.status = &status
	return r
}

func (r ApiWirelessWirelessLinksListRequest) StatusEmpty(statusEmpty bool) ApiWirelessWirelessLinksListRequest {
	r.statusEmpty = &statusEmpty
	return r
}

// * &#x60;connected&#x60; - Connected * &#x60;planned&#x60; - Planned * &#x60;decommissioning&#x60; - Decommissioning
func (r ApiWirelessWirelessLinksListRequest) StatusIc(statusIc []DcimCablesListStatusIcParameterInner) ApiWirelessWirelessLinksListRequest {
	r.statusIc = &statusIc
	return r
}

// * &#x60;connected&#x60; - Connected * &#x60;planned&#x60; - Planned * &#x60;decommissioning&#x60; - Decommissioning
func (r ApiWirelessWirelessLinksListRequest) StatusIe(statusIe []DcimCablesListStatusIcParameterInner) ApiWirelessWirelessLinksListRequest {
	r.statusIe = &statusIe
	return r
}

// * &#x60;connected&#x60; - Connected * &#x60;planned&#x60; - Planned * &#x60;decommissioning&#x60; - Decommissioning
func (r ApiWirelessWirelessLinksListRequest) StatusIew(statusIew []DcimCablesListStatusIcParameterInner) ApiWirelessWirelessLinksListRequest {
	r.statusIew = &statusIew
	return r
}

// * &#x60;connected&#x60; - Connected * &#x60;planned&#x60; - Planned * &#x60;decommissioning&#x60; - Decommissioning
func (r ApiWirelessWirelessLinksListRequest) StatusIsw(statusIsw []DcimCablesListStatusIcParameterInner) ApiWirelessWirelessLinksListRequest {
	r.statusIsw = &statusIsw
	return r
}

// * &#x60;connected&#x60; - Connected * &#x60;planned&#x60; - Planned * &#x60;decommissioning&#x60; - Decommissioning
func (r ApiWirelessWirelessLinksListRequest) StatusN(statusN []DcimCablesListStatusIcParameterInner) ApiWirelessWirelessLinksListRequest {
	r.statusN = &statusN
	return r
}

// * &#x60;connected&#x60; - Connected * &#x60;planned&#x60; - Planned * &#x60;decommissioning&#x60; - Decommissioning
func (r ApiWirelessWirelessLinksListRequest) StatusNic(statusNic []DcimCablesListStatusIcParameterInner) ApiWirelessWirelessLinksListRequest {
	r.statusNic = &statusNic
	return r
}

// * &#x60;connected&#x60; - Connected * &#x60;planned&#x60; - Planned * &#x60;decommissioning&#x60; - Decommissioning
func (r ApiWirelessWirelessLinksListRequest) StatusNie(statusNie []DcimCablesListStatusIcParameterInner) ApiWirelessWirelessLinksListRequest {
	r.statusNie = &statusNie
	return r
}

// * &#x60;connected&#x60; - Connected * &#x60;planned&#x60; - Planned * &#x60;decommissioning&#x60; - Decommissioning
func (r ApiWirelessWirelessLinksListRequest) StatusNiew(statusNiew []DcimCablesListStatusIcParameterInner) ApiWirelessWirelessLinksListRequest {
	r.statusNiew = &statusNiew
	return r
}

// * &#x60;connected&#x60; - Connected * &#x60;planned&#x60; - Planned * &#x60;decommissioning&#x60; - Decommissioning
func (r ApiWirelessWirelessLinksListRequest) StatusNisw(statusNisw []DcimCablesListStatusIcParameterInner) ApiWirelessWirelessLinksListRequest {
	r.statusNisw = &statusNisw
	return r
}

func (r ApiWirelessWirelessLinksListRequest) Tag(tag []string) ApiWirelessWirelessLinksListRequest {
	r.tag = &tag
	return r
}

func (r ApiWirelessWirelessLinksListRequest) TagN(tagN []string) ApiWirelessWirelessLinksListRequest {
	r.tagN = &tagN
	return r
}

// Tenant (slug)
func (r ApiWirelessWirelessLinksListRequest) Tenant(tenant []string) ApiWirelessWirelessLinksListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (slug)
func (r ApiWirelessWirelessLinksListRequest) TenantN(tenantN []string) ApiWirelessWirelessLinksListRequest {
	r.tenantN = &tenantN
	return r
}

func (r ApiWirelessWirelessLinksListRequest) TenantGroup(tenantGroup []string) ApiWirelessWirelessLinksListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

func (r ApiWirelessWirelessLinksListRequest) TenantGroupN(tenantGroupN []string) ApiWirelessWirelessLinksListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

func (r ApiWirelessWirelessLinksListRequest) TenantGroupId(tenantGroupId []string) ApiWirelessWirelessLinksListRequest {
	r.tenantGroupId = &tenantGroupId
	return r
}

func (r ApiWirelessWirelessLinksListRequest) TenantGroupIdN(tenantGroupIdN []string) ApiWirelessWirelessLinksListRequest {
	r.tenantGroupIdN = &tenantGroupIdN
	return r
}

// Tenant (ID)
func (r ApiWirelessWirelessLinksListRequest) TenantId(tenantId []*int32) ApiWirelessWirelessLinksListRequest {
	r.tenantId = &tenantId
	return r
}

// Tenant (ID)
func (r ApiWirelessWirelessLinksListRequest) TenantIdN(tenantIdN []*int32) ApiWirelessWirelessLinksListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

func (r ApiWirelessWirelessLinksListRequest) UpdatedByRequest(updatedByRequest string) ApiWirelessWirelessLinksListRequest {
	r.updatedByRequest = &updatedByRequest
	return r
}

func (r ApiWirelessWirelessLinksListRequest) Execute() (*PaginatedWirelessLinkList, *http.Response, error) {
	return r.ApiService.WirelessWirelessLinksListExecute(r)
}

/*
WirelessWirelessLinksList Method for WirelessWirelessLinksList

Get a list of wireless link objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWirelessWirelessLinksListRequest
*/
func (a *WirelessAPIService) WirelessWirelessLinksList(ctx context.Context) ApiWirelessWirelessLinksListRequest {
	return ApiWirelessWirelessLinksListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedWirelessLinkList
func (a *WirelessAPIService) WirelessWirelessLinksListExecute(r ApiWirelessWirelessLinksListRequest) (*PaginatedWirelessLinkList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedWirelessLinkList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WirelessAPIService.WirelessWirelessLinksList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/wireless/wireless-links/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.authCipher != nil {
		t := *r.authCipher
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher", t, "multi")
		}
	}
	if r.authCipherEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__empty", r.authCipherEmpty, "")
	}
	if r.authCipherIc != nil {
		t := *r.authCipherIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__ic", t, "multi")
		}
	}
	if r.authCipherIe != nil {
		t := *r.authCipherIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__ie", t, "multi")
		}
	}
	if r.authCipherIew != nil {
		t := *r.authCipherIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__iew", t, "multi")
		}
	}
	if r.authCipherIsw != nil {
		t := *r.authCipherIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__isw", t, "multi")
		}
	}
	if r.authCipherN != nil {
		t := *r.authCipherN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__n", t, "multi")
		}
	}
	if r.authCipherNic != nil {
		t := *r.authCipherNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__nic", t, "multi")
		}
	}
	if r.authCipherNie != nil {
		t := *r.authCipherNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__nie", t, "multi")
		}
	}
	if r.authCipherNiew != nil {
		t := *r.authCipherNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__niew", t, "multi")
		}
	}
	if r.authCipherNisw != nil {
		t := *r.authCipherNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_cipher__nisw", t, "multi")
		}
	}
	if r.authPsk != nil {
		t := *r.authPsk
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk", t, "multi")
		}
	}
	if r.authPskEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__empty", r.authPskEmpty, "")
	}
	if r.authPskIc != nil {
		t := *r.authPskIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__ic", t, "multi")
		}
	}
	if r.authPskIe != nil {
		t := *r.authPskIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__ie", t, "multi")
		}
	}
	if r.authPskIew != nil {
		t := *r.authPskIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__iew", t, "multi")
		}
	}
	if r.authPskIsw != nil {
		t := *r.authPskIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__isw", t, "multi")
		}
	}
	if r.authPskN != nil {
		t := *r.authPskN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__n", t, "multi")
		}
	}
	if r.authPskNic != nil {
		t := *r.authPskNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__nic", t, "multi")
		}
	}
	if r.authPskNie != nil {
		t := *r.authPskNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__nie", t, "multi")
		}
	}
	if r.authPskNiew != nil {
		t := *r.authPskNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__niew", t, "multi")
		}
	}
	if r.authPskNisw != nil {
		t := *r.authPskNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_psk__nisw", t, "multi")
		}
	}
	if r.authType != nil {
		t := *r.authType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type", t, "multi")
		}
	}
	if r.authTypeEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__empty", r.authTypeEmpty, "")
	}
	if r.authTypeIc != nil {
		t := *r.authTypeIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__ic", t, "multi")
		}
	}
	if r.authTypeIe != nil {
		t := *r.authTypeIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__ie", t, "multi")
		}
	}
	if r.authTypeIew != nil {
		t := *r.authTypeIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__iew", t, "multi")
		}
	}
	if r.authTypeIsw != nil {
		t := *r.authTypeIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__isw", t, "multi")
		}
	}
	if r.authTypeN != nil {
		t := *r.authTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__n", t, "multi")
		}
	}
	if r.authTypeNic != nil {
		t := *r.authTypeNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__nic", t, "multi")
		}
	}
	if r.authTypeNie != nil {
		t := *r.authTypeNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__nie", t, "multi")
		}
	}
	if r.authTypeNiew != nil {
		t := *r.authTypeNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__niew", t, "multi")
		}
	}
	if r.authTypeNisw != nil {
		t := *r.authTypeNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "auth_type__nisw", t, "multi")
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created", t, "multi")
		}
	}
	if r.createdEmpty != nil {
		t := *r.createdEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__empty", t, "multi")
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gt", t, "multi")
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__gte", t, "multi")
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lt", t, "multi")
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__lte", t, "multi")
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "created__n", t, "multi")
		}
	}
	if r.createdByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_request", r.createdByRequest, "")
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description", t, "multi")
		}
	}
	if r.descriptionEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description__empty", r.descriptionEmpty, "")
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ic", t, "multi")
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__ie", t, "multi")
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__iew", t, "multi")
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__isw", t, "multi")
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__n", t, "multi")
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nic", t, "multi")
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nie", t, "multi")
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__niew", t, "multi")
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "description__nisw", t, "multi")
		}
	}
	if r.distance != nil {
		t := *r.distance
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "distance", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "distance", t, "multi")
		}
	}
	if r.distanceEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distance__empty", r.distanceEmpty, "")
	}
	if r.distanceGt != nil {
		t := *r.distanceGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "distance__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "distance__gt", t, "multi")
		}
	}
	if r.distanceGte != nil {
		t := *r.distanceGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "distance__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "distance__gte", t, "multi")
		}
	}
	if r.distanceLt != nil {
		t := *r.distanceLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "distance__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "distance__lt", t, "multi")
		}
	}
	if r.distanceLte != nil {
		t := *r.distanceLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "distance__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "distance__lte", t, "multi")
		}
	}
	if r.distanceN != nil {
		t := *r.distanceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "distance__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "distance__n", t, "multi")
		}
	}
	if r.distanceUnit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distance_unit", r.distanceUnit, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	if r.idEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__empty", r.idEmpty, "")
	}
	if r.idGt != nil {
		t := *r.idGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", t, "multi")
		}
	}
	if r.idGte != nil {
		t := *r.idGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", t, "multi")
		}
	}
	if r.idLt != nil {
		t := *r.idLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", t, "multi")
		}
	}
	if r.idLte != nil {
		t := *r.idLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", t, "multi")
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id__n", t, "multi")
		}
	}
	if r.interfaceAId != nil {
		t := *r.interfaceAId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interface_a_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interface_a_id", t, "multi")
		}
	}
	if r.interfaceAIdN != nil {
		t := *r.interfaceAIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interface_a_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interface_a_id__n", t, "multi")
		}
	}
	if r.interfaceBId != nil {
		t := *r.interfaceBId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interface_b_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interface_b_id", t, "multi")
		}
	}
	if r.interfaceBIdN != nil {
		t := *r.interfaceBIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interface_b_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interface_b_id__n", t, "multi")
		}
	}
	if r.lastUpdated != nil {
		t := *r.lastUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated", t, "multi")
		}
	}
	if r.lastUpdatedEmpty != nil {
		t := *r.lastUpdatedEmpty
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__empty", t, "multi")
		}
	}
	if r.lastUpdatedGt != nil {
		t := *r.lastUpdatedGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gt", t, "multi")
		}
	}
	if r.lastUpdatedGte != nil {
		t := *r.lastUpdatedGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__gte", t, "multi")
		}
	}
	if r.lastUpdatedLt != nil {
		t := *r.lastUpdatedLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lt", t, "multi")
		}
	}
	if r.lastUpdatedLte != nil {
		t := *r.lastUpdatedLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__lte", t, "multi")
		}
	}
	if r.lastUpdatedN != nil {
		t := *r.lastUpdatedN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "last_updated__n", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.modifiedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modified_by_request", r.modifiedByRequest, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.ordering != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ordering", r.ordering, "")
	}
	if r.q != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "")
	}
	if r.ssid != nil {
		t := *r.ssid
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ssid", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ssid", t, "multi")
		}
	}
	if r.ssidEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__empty", r.ssidEmpty, "")
	}
	if r.ssidIc != nil {
		t := *r.ssidIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__ic", t, "multi")
		}
	}
	if r.ssidIe != nil {
		t := *r.ssidIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__ie", t, "multi")
		}
	}
	if r.ssidIew != nil {
		t := *r.ssidIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__iew", t, "multi")
		}
	}
	if r.ssidIsw != nil {
		t := *r.ssidIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__isw", t, "multi")
		}
	}
	if r.ssidN != nil {
		t := *r.ssidN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__n", t, "multi")
		}
	}
	if r.ssidNic != nil {
		t := *r.ssidNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__nic", t, "multi")
		}
	}
	if r.ssidNie != nil {
		t := *r.ssidNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__nie", t, "multi")
		}
	}
	if r.ssidNiew != nil {
		t := *r.ssidNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__niew", t, "multi")
		}
	}
	if r.ssidNisw != nil {
		t := *r.ssidNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ssid__nisw", t, "multi")
		}
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "multi")
		}
	}
	if r.statusEmpty != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__empty", r.statusEmpty, "")
	}
	if r.statusIc != nil {
		t := *r.statusIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__ic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__ic", t, "multi")
		}
	}
	if r.statusIe != nil {
		t := *r.statusIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__ie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__ie", t, "multi")
		}
	}
	if r.statusIew != nil {
		t := *r.statusIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__iew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__iew", t, "multi")
		}
	}
	if r.statusIsw != nil {
		t := *r.statusIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__isw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__isw", t, "multi")
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__n", t, "multi")
		}
	}
	if r.statusNic != nil {
		t := *r.statusNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__nic", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__nic", t, "multi")
		}
	}
	if r.statusNie != nil {
		t := *r.statusNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__nie", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__nie", t, "multi")
		}
	}
	if r.statusNiew != nil {
		t := *r.statusNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__niew", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__niew", t, "multi")
		}
	}
	if r.statusNisw != nil {
		t := *r.statusNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status__nisw", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status__nisw", t, "multi")
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag", t, "multi")
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag__n", t, "multi")
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant", t, "multi")
		}
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant__n", t, "multi")
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group", t, "multi")
		}
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group__n", t, "multi")
		}
	}
	if r.tenantGroupId != nil {
		t := *r.tenantGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id", t, "multi")
		}
	}
	if r.tenantGroupIdN != nil {
		t := *r.tenantGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_group_id__n", t, "multi")
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id", t, "multi")
		}
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tenant_id__n", t, "multi")
		}
	}
	if r.updatedByRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_by_request", r.updatedByRequest, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWirelessWirelessLinksPartialUpdateRequest struct {
	ctx context.Context
	ApiService *WirelessAPIService
	id int32
	patchedWritableWirelessLinkRequest *PatchedWritableWirelessLinkRequest
}

func (r ApiWirelessWirelessLinksPartialUpdateRequest) PatchedWritableWirelessLinkRequest(patchedWritableWirelessLinkRequest PatchedWritableWirelessLinkRequest) ApiWirelessWirelessLinksPartialUpdateRequest {
	r.patchedWritableWirelessLinkRequest = &patchedWritableWirelessLinkRequest
	return r
}

func (r ApiWirelessWirelessLinksPartialUpdateRequest) Execute() (*WirelessLink, *http.Response, error) {
	return r.ApiService.WirelessWirelessLinksPartialUpdateExecute(r)
}

/*
WirelessWirelessLinksPartialUpdate Method for WirelessWirelessLinksPartialUpdate

Patch a wireless link object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this wireless link.
 @return ApiWirelessWirelessLinksPartialUpdateRequest
*/
func (a *WirelessAPIService) WirelessWirelessLinksPartialUpdate(ctx context.Context, id int32) ApiWirelessWirelessLinksPartialUpdateRequest {
	return ApiWirelessWirelessLinksPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return WirelessLink
func (a *WirelessAPIService) WirelessWirelessLinksPartialUpdateExecute(r ApiWirelessWirelessLinksPartialUpdateRequest) (*WirelessLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WirelessLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WirelessAPIService.WirelessWirelessLinksPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/wireless/wireless-links/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableWirelessLinkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWirelessWirelessLinksRetrieveRequest struct {
	ctx context.Context
	ApiService *WirelessAPIService
	id int32
}

func (r ApiWirelessWirelessLinksRetrieveRequest) Execute() (*WirelessLink, *http.Response, error) {
	return r.ApiService.WirelessWirelessLinksRetrieveExecute(r)
}

/*
WirelessWirelessLinksRetrieve Method for WirelessWirelessLinksRetrieve

Get a wireless link object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this wireless link.
 @return ApiWirelessWirelessLinksRetrieveRequest
*/
func (a *WirelessAPIService) WirelessWirelessLinksRetrieve(ctx context.Context, id int32) ApiWirelessWirelessLinksRetrieveRequest {
	return ApiWirelessWirelessLinksRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return WirelessLink
func (a *WirelessAPIService) WirelessWirelessLinksRetrieveExecute(r ApiWirelessWirelessLinksRetrieveRequest) (*WirelessLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WirelessLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WirelessAPIService.WirelessWirelessLinksRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/wireless/wireless-links/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWirelessWirelessLinksUpdateRequest struct {
	ctx context.Context
	ApiService *WirelessAPIService
	id int32
	writableWirelessLinkRequest *WritableWirelessLinkRequest
}

func (r ApiWirelessWirelessLinksUpdateRequest) WritableWirelessLinkRequest(writableWirelessLinkRequest WritableWirelessLinkRequest) ApiWirelessWirelessLinksUpdateRequest {
	r.writableWirelessLinkRequest = &writableWirelessLinkRequest
	return r
}

func (r ApiWirelessWirelessLinksUpdateRequest) Execute() (*WirelessLink, *http.Response, error) {
	return r.ApiService.WirelessWirelessLinksUpdateExecute(r)
}

/*
WirelessWirelessLinksUpdate Method for WirelessWirelessLinksUpdate

Put a wireless link object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this wireless link.
 @return ApiWirelessWirelessLinksUpdateRequest
*/
func (a *WirelessAPIService) WirelessWirelessLinksUpdate(ctx context.Context, id int32) ApiWirelessWirelessLinksUpdateRequest {
	return ApiWirelessWirelessLinksUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return WirelessLink
func (a *WirelessAPIService) WirelessWirelessLinksUpdateExecute(r ApiWirelessWirelessLinksUpdateRequest) (*WirelessLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WirelessLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WirelessAPIService.WirelessWirelessLinksUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/wireless/wireless-links/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableWirelessLinkRequest == nil {
		return localVarReturnValue, nil, reportError("writableWirelessLinkRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableWirelessLinkRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
