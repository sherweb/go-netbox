/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.2 (4.1)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// AuthenticationCipher1 * `auto` - Auto * `tkip` - TKIP * `aes` - AES
type AuthenticationCipher1 string

// List of Authentication_cipher_1
const (
	AUTHENTICATIONCIPHER1_AUTO AuthenticationCipher1 = "auto"
	AUTHENTICATIONCIPHER1_TKIP AuthenticationCipher1 = "tkip"
	AUTHENTICATIONCIPHER1_AES AuthenticationCipher1 = "aes"
	AUTHENTICATIONCIPHER1_EMPTY AuthenticationCipher1 = ""
)

// All allowed values of AuthenticationCipher1 enum
var AllowedAuthenticationCipher1EnumValues = []AuthenticationCipher1{
	"auto",
	"tkip",
	"aes",
	"",
}

func (v *AuthenticationCipher1) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthenticationCipher1(value)
	for _, existing := range AllowedAuthenticationCipher1EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthenticationCipher1", value)
}

// NewAuthenticationCipher1FromValue returns a pointer to a valid AuthenticationCipher1
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthenticationCipher1FromValue(v string) (*AuthenticationCipher1, error) {
	ev := AuthenticationCipher1(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthenticationCipher1: valid values are %v", v, AllowedAuthenticationCipher1EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthenticationCipher1) IsValid() bool {
	for _, existing := range AllowedAuthenticationCipher1EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Authentication_cipher_1 value
func (v AuthenticationCipher1) Ptr() *AuthenticationCipher1 {
	return &v
}

type NullableAuthenticationCipher1 struct {
	value *AuthenticationCipher1
	isSet bool
}

func (v NullableAuthenticationCipher1) Get() *AuthenticationCipher1 {
	return v.value
}

func (v *NullableAuthenticationCipher1) Set(val *AuthenticationCipher1) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationCipher1) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationCipher1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationCipher1(val *AuthenticationCipher1) *NullableAuthenticationCipher1 {
	return &NullableAuthenticationCipher1{value: val, isSet: true}
}

func (v NullableAuthenticationCipher1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationCipher1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

