/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.2 (4.1)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// ExtrasWebhooksListHttpMethodIcParameterInner the model 'ExtrasWebhooksListHttpMethodIcParameterInner'
type ExtrasWebhooksListHttpMethodIcParameterInner string

// List of extras_webhooks_list_http_method__ic_parameter_inner
const (
	EXTRASWEBHOOKSLISTHTTPMETHODICPARAMETERINNER_DELETE ExtrasWebhooksListHttpMethodIcParameterInner = "DELETE"
	EXTRASWEBHOOKSLISTHTTPMETHODICPARAMETERINNER_GET ExtrasWebhooksListHttpMethodIcParameterInner = "GET"
	EXTRASWEBHOOKSLISTHTTPMETHODICPARAMETERINNER_PATCH ExtrasWebhooksListHttpMethodIcParameterInner = "PATCH"
	EXTRASWEBHOOKSLISTHTTPMETHODICPARAMETERINNER_POST ExtrasWebhooksListHttpMethodIcParameterInner = "POST"
	EXTRASWEBHOOKSLISTHTTPMETHODICPARAMETERINNER_PUT ExtrasWebhooksListHttpMethodIcParameterInner = "PUT"
)

// All allowed values of ExtrasWebhooksListHttpMethodIcParameterInner enum
var AllowedExtrasWebhooksListHttpMethodIcParameterInnerEnumValues = []ExtrasWebhooksListHttpMethodIcParameterInner{
	"DELETE",
	"GET",
	"PATCH",
	"POST",
	"PUT",
}

func (v *ExtrasWebhooksListHttpMethodIcParameterInner) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExtrasWebhooksListHttpMethodIcParameterInner(value)
	for _, existing := range AllowedExtrasWebhooksListHttpMethodIcParameterInnerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExtrasWebhooksListHttpMethodIcParameterInner", value)
}

// NewExtrasWebhooksListHttpMethodIcParameterInnerFromValue returns a pointer to a valid ExtrasWebhooksListHttpMethodIcParameterInner
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExtrasWebhooksListHttpMethodIcParameterInnerFromValue(v string) (*ExtrasWebhooksListHttpMethodIcParameterInner, error) {
	ev := ExtrasWebhooksListHttpMethodIcParameterInner(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExtrasWebhooksListHttpMethodIcParameterInner: valid values are %v", v, AllowedExtrasWebhooksListHttpMethodIcParameterInnerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExtrasWebhooksListHttpMethodIcParameterInner) IsValid() bool {
	for _, existing := range AllowedExtrasWebhooksListHttpMethodIcParameterInnerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to extras_webhooks_list_http_method__ic_parameter_inner value
func (v ExtrasWebhooksListHttpMethodIcParameterInner) Ptr() *ExtrasWebhooksListHttpMethodIcParameterInner {
	return &v
}

type NullableExtrasWebhooksListHttpMethodIcParameterInner struct {
	value *ExtrasWebhooksListHttpMethodIcParameterInner
	isSet bool
}

func (v NullableExtrasWebhooksListHttpMethodIcParameterInner) Get() *ExtrasWebhooksListHttpMethodIcParameterInner {
	return v.value
}

func (v *NullableExtrasWebhooksListHttpMethodIcParameterInner) Set(val *ExtrasWebhooksListHttpMethodIcParameterInner) {
	v.value = val
	v.isSet = true
}

func (v NullableExtrasWebhooksListHttpMethodIcParameterInner) IsSet() bool {
	return v.isSet
}

func (v *NullableExtrasWebhooksListHttpMethodIcParameterInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtrasWebhooksListHttpMethodIcParameterInner(val *ExtrasWebhooksListHttpMethodIcParameterInner) *NullableExtrasWebhooksListHttpMethodIcParameterInner {
	return &NullableExtrasWebhooksListHttpMethodIcParameterInner{value: val, isSet: true}
}

func (v NullableExtrasWebhooksListHttpMethodIcParameterInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtrasWebhooksListHttpMethodIcParameterInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

