/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.2 (4.1)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// DcimInterfacesListDuplexIcParameterInner the model 'DcimInterfacesListDuplexIcParameterInner'
type DcimInterfacesListDuplexIcParameterInner string

// List of dcim_interfaces_list_duplex__ic_parameter_inner
const (
	DCIMINTERFACESLISTDUPLEXICPARAMETERINNER_EMPTY DcimInterfacesListDuplexIcParameterInner = ""
	DCIMINTERFACESLISTDUPLEXICPARAMETERINNER_NULL DcimInterfacesListDuplexIcParameterInner = "null"
	DCIMINTERFACESLISTDUPLEXICPARAMETERINNER_AUTO DcimInterfacesListDuplexIcParameterInner = "auto"
	DCIMINTERFACESLISTDUPLEXICPARAMETERINNER_FULL DcimInterfacesListDuplexIcParameterInner = "full"
	DCIMINTERFACESLISTDUPLEXICPARAMETERINNER_HALF DcimInterfacesListDuplexIcParameterInner = "half"
)

// All allowed values of DcimInterfacesListDuplexIcParameterInner enum
var AllowedDcimInterfacesListDuplexIcParameterInnerEnumValues = []DcimInterfacesListDuplexIcParameterInner{
	"",
	"null",
	"auto",
	"full",
	"half",
}

func (v *DcimInterfacesListDuplexIcParameterInner) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DcimInterfacesListDuplexIcParameterInner(value)
	for _, existing := range AllowedDcimInterfacesListDuplexIcParameterInnerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DcimInterfacesListDuplexIcParameterInner", value)
}

// NewDcimInterfacesListDuplexIcParameterInnerFromValue returns a pointer to a valid DcimInterfacesListDuplexIcParameterInner
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDcimInterfacesListDuplexIcParameterInnerFromValue(v string) (*DcimInterfacesListDuplexIcParameterInner, error) {
	ev := DcimInterfacesListDuplexIcParameterInner(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DcimInterfacesListDuplexIcParameterInner: valid values are %v", v, AllowedDcimInterfacesListDuplexIcParameterInnerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DcimInterfacesListDuplexIcParameterInner) IsValid() bool {
	for _, existing := range AllowedDcimInterfacesListDuplexIcParameterInnerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to dcim_interfaces_list_duplex__ic_parameter_inner value
func (v DcimInterfacesListDuplexIcParameterInner) Ptr() *DcimInterfacesListDuplexIcParameterInner {
	return &v
}

type NullableDcimInterfacesListDuplexIcParameterInner struct {
	value *DcimInterfacesListDuplexIcParameterInner
	isSet bool
}

func (v NullableDcimInterfacesListDuplexIcParameterInner) Get() *DcimInterfacesListDuplexIcParameterInner {
	return v.value
}

func (v *NullableDcimInterfacesListDuplexIcParameterInner) Set(val *DcimInterfacesListDuplexIcParameterInner) {
	v.value = val
	v.isSet = true
}

func (v NullableDcimInterfacesListDuplexIcParameterInner) IsSet() bool {
	return v.isSet
}

func (v *NullableDcimInterfacesListDuplexIcParameterInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDcimInterfacesListDuplexIcParameterInner(val *DcimInterfacesListDuplexIcParameterInner) *NullableDcimInterfacesListDuplexIcParameterInner {
	return &NullableDcimInterfacesListDuplexIcParameterInner{value: val, isSet: true}
}

func (v NullableDcimInterfacesListDuplexIcParameterInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDcimInterfacesListDuplexIcParameterInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

