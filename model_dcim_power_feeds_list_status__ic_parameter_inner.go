/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.2 (4.1)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// DcimPowerFeedsListStatusIcParameterInner the model 'DcimPowerFeedsListStatusIcParameterInner'
type DcimPowerFeedsListStatusIcParameterInner string

// List of dcim_power_feeds_list_status__ic_parameter_inner
const (
	DCIMPOWERFEEDSLISTSTATUSICPARAMETERINNER_ACTIVE DcimPowerFeedsListStatusIcParameterInner = "active"
	DCIMPOWERFEEDSLISTSTATUSICPARAMETERINNER_FAILED DcimPowerFeedsListStatusIcParameterInner = "failed"
	DCIMPOWERFEEDSLISTSTATUSICPARAMETERINNER_OFFLINE DcimPowerFeedsListStatusIcParameterInner = "offline"
	DCIMPOWERFEEDSLISTSTATUSICPARAMETERINNER_PLANNED DcimPowerFeedsListStatusIcParameterInner = "planned"
)

// All allowed values of DcimPowerFeedsListStatusIcParameterInner enum
var AllowedDcimPowerFeedsListStatusIcParameterInnerEnumValues = []DcimPowerFeedsListStatusIcParameterInner{
	"active",
	"failed",
	"offline",
	"planned",
}

func (v *DcimPowerFeedsListStatusIcParameterInner) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DcimPowerFeedsListStatusIcParameterInner(value)
	for _, existing := range AllowedDcimPowerFeedsListStatusIcParameterInnerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DcimPowerFeedsListStatusIcParameterInner", value)
}

// NewDcimPowerFeedsListStatusIcParameterInnerFromValue returns a pointer to a valid DcimPowerFeedsListStatusIcParameterInner
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDcimPowerFeedsListStatusIcParameterInnerFromValue(v string) (*DcimPowerFeedsListStatusIcParameterInner, error) {
	ev := DcimPowerFeedsListStatusIcParameterInner(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DcimPowerFeedsListStatusIcParameterInner: valid values are %v", v, AllowedDcimPowerFeedsListStatusIcParameterInnerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DcimPowerFeedsListStatusIcParameterInner) IsValid() bool {
	for _, existing := range AllowedDcimPowerFeedsListStatusIcParameterInnerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to dcim_power_feeds_list_status__ic_parameter_inner value
func (v DcimPowerFeedsListStatusIcParameterInner) Ptr() *DcimPowerFeedsListStatusIcParameterInner {
	return &v
}

type NullableDcimPowerFeedsListStatusIcParameterInner struct {
	value *DcimPowerFeedsListStatusIcParameterInner
	isSet bool
}

func (v NullableDcimPowerFeedsListStatusIcParameterInner) Get() *DcimPowerFeedsListStatusIcParameterInner {
	return v.value
}

func (v *NullableDcimPowerFeedsListStatusIcParameterInner) Set(val *DcimPowerFeedsListStatusIcParameterInner) {
	v.value = val
	v.isSet = true
}

func (v NullableDcimPowerFeedsListStatusIcParameterInner) IsSet() bool {
	return v.isSet
}

func (v *NullableDcimPowerFeedsListStatusIcParameterInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDcimPowerFeedsListStatusIcParameterInner(val *DcimPowerFeedsListStatusIcParameterInner) *NullableDcimPowerFeedsListStatusIcParameterInner {
	return &NullableDcimPowerFeedsListStatusIcParameterInner{value: val, isSet: true}
}

func (v NullableDcimPowerFeedsListStatusIcParameterInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDcimPowerFeedsListStatusIcParameterInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

