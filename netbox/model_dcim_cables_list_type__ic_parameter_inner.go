/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.2 (4.1)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// DcimCablesListTypeIcParameterInner the model 'DcimCablesListTypeIcParameterInner'
type DcimCablesListTypeIcParameterInner string

// List of dcim_cables_list_type__ic_parameter_inner
const (
	DCIMCABLESLISTTYPEICPARAMETERINNER_EMPTY DcimCablesListTypeIcParameterInner = ""
	DCIMCABLESLISTTYPEICPARAMETERINNER_AOC DcimCablesListTypeIcParameterInner = "aoc"
	DCIMCABLESLISTTYPEICPARAMETERINNER_CAT3 DcimCablesListTypeIcParameterInner = "cat3"
	DCIMCABLESLISTTYPEICPARAMETERINNER_CAT5 DcimCablesListTypeIcParameterInner = "cat5"
	DCIMCABLESLISTTYPEICPARAMETERINNER_CAT5E DcimCablesListTypeIcParameterInner = "cat5e"
	DCIMCABLESLISTTYPEICPARAMETERINNER_CAT6 DcimCablesListTypeIcParameterInner = "cat6"
	DCIMCABLESLISTTYPEICPARAMETERINNER_CAT6A DcimCablesListTypeIcParameterInner = "cat6a"
	DCIMCABLESLISTTYPEICPARAMETERINNER_CAT7 DcimCablesListTypeIcParameterInner = "cat7"
	DCIMCABLESLISTTYPEICPARAMETERINNER_CAT7A DcimCablesListTypeIcParameterInner = "cat7a"
	DCIMCABLESLISTTYPEICPARAMETERINNER_CAT8 DcimCablesListTypeIcParameterInner = "cat8"
	DCIMCABLESLISTTYPEICPARAMETERINNER_COAXIAL DcimCablesListTypeIcParameterInner = "coaxial"
	DCIMCABLESLISTTYPEICPARAMETERINNER_DAC_ACTIVE DcimCablesListTypeIcParameterInner = "dac-active"
	DCIMCABLESLISTTYPEICPARAMETERINNER_DAC_PASSIVE DcimCablesListTypeIcParameterInner = "dac-passive"
	DCIMCABLESLISTTYPEICPARAMETERINNER_MMF DcimCablesListTypeIcParameterInner = "mmf"
	DCIMCABLESLISTTYPEICPARAMETERINNER_MMF_OM1 DcimCablesListTypeIcParameterInner = "mmf-om1"
	DCIMCABLESLISTTYPEICPARAMETERINNER_MMF_OM2 DcimCablesListTypeIcParameterInner = "mmf-om2"
	DCIMCABLESLISTTYPEICPARAMETERINNER_MMF_OM3 DcimCablesListTypeIcParameterInner = "mmf-om3"
	DCIMCABLESLISTTYPEICPARAMETERINNER_MMF_OM4 DcimCablesListTypeIcParameterInner = "mmf-om4"
	DCIMCABLESLISTTYPEICPARAMETERINNER_MMF_OM5 DcimCablesListTypeIcParameterInner = "mmf-om5"
	DCIMCABLESLISTTYPEICPARAMETERINNER_MRJ21_TRUNK DcimCablesListTypeIcParameterInner = "mrj21-trunk"
	DCIMCABLESLISTTYPEICPARAMETERINNER_POWER DcimCablesListTypeIcParameterInner = "power"
	DCIMCABLESLISTTYPEICPARAMETERINNER_SMF DcimCablesListTypeIcParameterInner = "smf"
	DCIMCABLESLISTTYPEICPARAMETERINNER_SMF_OS1 DcimCablesListTypeIcParameterInner = "smf-os1"
	DCIMCABLESLISTTYPEICPARAMETERINNER_SMF_OS2 DcimCablesListTypeIcParameterInner = "smf-os2"
	DCIMCABLESLISTTYPEICPARAMETERINNER_USB DcimCablesListTypeIcParameterInner = "usb"
)

// All allowed values of DcimCablesListTypeIcParameterInner enum
var AllowedDcimCablesListTypeIcParameterInnerEnumValues = []DcimCablesListTypeIcParameterInner{
	"",
	"aoc",
	"cat3",
	"cat5",
	"cat5e",
	"cat6",
	"cat6a",
	"cat7",
	"cat7a",
	"cat8",
	"coaxial",
	"dac-active",
	"dac-passive",
	"mmf",
	"mmf-om1",
	"mmf-om2",
	"mmf-om3",
	"mmf-om4",
	"mmf-om5",
	"mrj21-trunk",
	"power",
	"smf",
	"smf-os1",
	"smf-os2",
	"usb",
}

func (v *DcimCablesListTypeIcParameterInner) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DcimCablesListTypeIcParameterInner(value)
	for _, existing := range AllowedDcimCablesListTypeIcParameterInnerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DcimCablesListTypeIcParameterInner", value)
}

// NewDcimCablesListTypeIcParameterInnerFromValue returns a pointer to a valid DcimCablesListTypeIcParameterInner
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDcimCablesListTypeIcParameterInnerFromValue(v string) (*DcimCablesListTypeIcParameterInner, error) {
	ev := DcimCablesListTypeIcParameterInner(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DcimCablesListTypeIcParameterInner: valid values are %v", v, AllowedDcimCablesListTypeIcParameterInnerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DcimCablesListTypeIcParameterInner) IsValid() bool {
	for _, existing := range AllowedDcimCablesListTypeIcParameterInnerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to dcim_cables_list_type__ic_parameter_inner value
func (v DcimCablesListTypeIcParameterInner) Ptr() *DcimCablesListTypeIcParameterInner {
	return &v
}

type NullableDcimCablesListTypeIcParameterInner struct {
	value *DcimCablesListTypeIcParameterInner
	isSet bool
}

func (v NullableDcimCablesListTypeIcParameterInner) Get() *DcimCablesListTypeIcParameterInner {
	return v.value
}

func (v *NullableDcimCablesListTypeIcParameterInner) Set(val *DcimCablesListTypeIcParameterInner) {
	v.value = val
	v.isSet = true
}

func (v NullableDcimCablesListTypeIcParameterInner) IsSet() bool {
	return v.isSet
}

func (v *NullableDcimCablesListTypeIcParameterInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDcimCablesListTypeIcParameterInner(val *DcimCablesListTypeIcParameterInner) *NullableDcimCablesListTypeIcParameterInner {
	return &NullableDcimCablesListTypeIcParameterInner{value: val, isSet: true}
}

func (v NullableDcimCablesListTypeIcParameterInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDcimCablesListTypeIcParameterInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

