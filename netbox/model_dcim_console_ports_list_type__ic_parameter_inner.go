/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.2 (4.1)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// DcimConsolePortsListTypeIcParameterInner the model 'DcimConsolePortsListTypeIcParameterInner'
type DcimConsolePortsListTypeIcParameterInner string

// List of dcim_console_ports_list_type__ic_parameter_inner
const (
	DCIMCONSOLEPORTSLISTTYPEICPARAMETERINNER_EMPTY DcimConsolePortsListTypeIcParameterInner = ""
	DCIMCONSOLEPORTSLISTTYPEICPARAMETERINNER_DB_25 DcimConsolePortsListTypeIcParameterInner = "db-25"
	DCIMCONSOLEPORTSLISTTYPEICPARAMETERINNER_DE_9 DcimConsolePortsListTypeIcParameterInner = "de-9"
	DCIMCONSOLEPORTSLISTTYPEICPARAMETERINNER_MINI_DIN_8 DcimConsolePortsListTypeIcParameterInner = "mini-din-8"
	DCIMCONSOLEPORTSLISTTYPEICPARAMETERINNER_OTHER DcimConsolePortsListTypeIcParameterInner = "other"
	DCIMCONSOLEPORTSLISTTYPEICPARAMETERINNER_RJ_11 DcimConsolePortsListTypeIcParameterInner = "rj-11"
	DCIMCONSOLEPORTSLISTTYPEICPARAMETERINNER_RJ_12 DcimConsolePortsListTypeIcParameterInner = "rj-12"
	DCIMCONSOLEPORTSLISTTYPEICPARAMETERINNER_RJ_45 DcimConsolePortsListTypeIcParameterInner = "rj-45"
	DCIMCONSOLEPORTSLISTTYPEICPARAMETERINNER_USB_A DcimConsolePortsListTypeIcParameterInner = "usb-a"
	DCIMCONSOLEPORTSLISTTYPEICPARAMETERINNER_USB_B DcimConsolePortsListTypeIcParameterInner = "usb-b"
	DCIMCONSOLEPORTSLISTTYPEICPARAMETERINNER_USB_C DcimConsolePortsListTypeIcParameterInner = "usb-c"
	DCIMCONSOLEPORTSLISTTYPEICPARAMETERINNER_USB_MICRO_A DcimConsolePortsListTypeIcParameterInner = "usb-micro-a"
	DCIMCONSOLEPORTSLISTTYPEICPARAMETERINNER_USB_MICRO_AB DcimConsolePortsListTypeIcParameterInner = "usb-micro-ab"
	DCIMCONSOLEPORTSLISTTYPEICPARAMETERINNER_USB_MICRO_B DcimConsolePortsListTypeIcParameterInner = "usb-micro-b"
	DCIMCONSOLEPORTSLISTTYPEICPARAMETERINNER_USB_MINI_A DcimConsolePortsListTypeIcParameterInner = "usb-mini-a"
	DCIMCONSOLEPORTSLISTTYPEICPARAMETERINNER_USB_MINI_B DcimConsolePortsListTypeIcParameterInner = "usb-mini-b"
)

// All allowed values of DcimConsolePortsListTypeIcParameterInner enum
var AllowedDcimConsolePortsListTypeIcParameterInnerEnumValues = []DcimConsolePortsListTypeIcParameterInner{
	"",
	"db-25",
	"de-9",
	"mini-din-8",
	"other",
	"rj-11",
	"rj-12",
	"rj-45",
	"usb-a",
	"usb-b",
	"usb-c",
	"usb-micro-a",
	"usb-micro-ab",
	"usb-micro-b",
	"usb-mini-a",
	"usb-mini-b",
}

func (v *DcimConsolePortsListTypeIcParameterInner) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DcimConsolePortsListTypeIcParameterInner(value)
	for _, existing := range AllowedDcimConsolePortsListTypeIcParameterInnerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DcimConsolePortsListTypeIcParameterInner", value)
}

// NewDcimConsolePortsListTypeIcParameterInnerFromValue returns a pointer to a valid DcimConsolePortsListTypeIcParameterInner
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDcimConsolePortsListTypeIcParameterInnerFromValue(v string) (*DcimConsolePortsListTypeIcParameterInner, error) {
	ev := DcimConsolePortsListTypeIcParameterInner(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DcimConsolePortsListTypeIcParameterInner: valid values are %v", v, AllowedDcimConsolePortsListTypeIcParameterInnerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DcimConsolePortsListTypeIcParameterInner) IsValid() bool {
	for _, existing := range AllowedDcimConsolePortsListTypeIcParameterInnerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to dcim_console_ports_list_type__ic_parameter_inner value
func (v DcimConsolePortsListTypeIcParameterInner) Ptr() *DcimConsolePortsListTypeIcParameterInner {
	return &v
}

type NullableDcimConsolePortsListTypeIcParameterInner struct {
	value *DcimConsolePortsListTypeIcParameterInner
	isSet bool
}

func (v NullableDcimConsolePortsListTypeIcParameterInner) Get() *DcimConsolePortsListTypeIcParameterInner {
	return v.value
}

func (v *NullableDcimConsolePortsListTypeIcParameterInner) Set(val *DcimConsolePortsListTypeIcParameterInner) {
	v.value = val
	v.isSet = true
}

func (v NullableDcimConsolePortsListTypeIcParameterInner) IsSet() bool {
	return v.isSet
}

func (v *NullableDcimConsolePortsListTypeIcParameterInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDcimConsolePortsListTypeIcParameterInner(val *DcimConsolePortsListTypeIcParameterInner) *NullableDcimConsolePortsListTypeIcParameterInner {
	return &NullableDcimConsolePortsListTypeIcParameterInner{value: val, isSet: true}
}

func (v NullableDcimConsolePortsListTypeIcParameterInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDcimConsolePortsListTypeIcParameterInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

