/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.2 (4.1)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// VpnTunnelsListEncapsulationIcParameterInner the model 'VpnTunnelsListEncapsulationIcParameterInner'
type VpnTunnelsListEncapsulationIcParameterInner string

// List of vpn_tunnels_list_encapsulation__ic_parameter_inner
const (
	VPNTUNNELSLISTENCAPSULATIONICPARAMETERINNER_GRE VpnTunnelsListEncapsulationIcParameterInner = "gre"
	VPNTUNNELSLISTENCAPSULATIONICPARAMETERINNER_IP_IP VpnTunnelsListEncapsulationIcParameterInner = "ip-ip"
	VPNTUNNELSLISTENCAPSULATIONICPARAMETERINNER_IPSEC_TRANSPORT VpnTunnelsListEncapsulationIcParameterInner = "ipsec-transport"
	VPNTUNNELSLISTENCAPSULATIONICPARAMETERINNER_IPSEC_TUNNEL VpnTunnelsListEncapsulationIcParameterInner = "ipsec-tunnel"
)

// All allowed values of VpnTunnelsListEncapsulationIcParameterInner enum
var AllowedVpnTunnelsListEncapsulationIcParameterInnerEnumValues = []VpnTunnelsListEncapsulationIcParameterInner{
	"gre",
	"ip-ip",
	"ipsec-transport",
	"ipsec-tunnel",
}

func (v *VpnTunnelsListEncapsulationIcParameterInner) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VpnTunnelsListEncapsulationIcParameterInner(value)
	for _, existing := range AllowedVpnTunnelsListEncapsulationIcParameterInnerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VpnTunnelsListEncapsulationIcParameterInner", value)
}

// NewVpnTunnelsListEncapsulationIcParameterInnerFromValue returns a pointer to a valid VpnTunnelsListEncapsulationIcParameterInner
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVpnTunnelsListEncapsulationIcParameterInnerFromValue(v string) (*VpnTunnelsListEncapsulationIcParameterInner, error) {
	ev := VpnTunnelsListEncapsulationIcParameterInner(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VpnTunnelsListEncapsulationIcParameterInner: valid values are %v", v, AllowedVpnTunnelsListEncapsulationIcParameterInnerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VpnTunnelsListEncapsulationIcParameterInner) IsValid() bool {
	for _, existing := range AllowedVpnTunnelsListEncapsulationIcParameterInnerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to vpn_tunnels_list_encapsulation__ic_parameter_inner value
func (v VpnTunnelsListEncapsulationIcParameterInner) Ptr() *VpnTunnelsListEncapsulationIcParameterInner {
	return &v
}

type NullableVpnTunnelsListEncapsulationIcParameterInner struct {
	value *VpnTunnelsListEncapsulationIcParameterInner
	isSet bool
}

func (v NullableVpnTunnelsListEncapsulationIcParameterInner) Get() *VpnTunnelsListEncapsulationIcParameterInner {
	return v.value
}

func (v *NullableVpnTunnelsListEncapsulationIcParameterInner) Set(val *VpnTunnelsListEncapsulationIcParameterInner) {
	v.value = val
	v.isSet = true
}

func (v NullableVpnTunnelsListEncapsulationIcParameterInner) IsSet() bool {
	return v.isSet
}

func (v *NullableVpnTunnelsListEncapsulationIcParameterInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpnTunnelsListEncapsulationIcParameterInner(val *VpnTunnelsListEncapsulationIcParameterInner) *NullableVpnTunnelsListEncapsulationIcParameterInner {
	return &NullableVpnTunnelsListEncapsulationIcParameterInner{value: val, isSet: true}
}

func (v NullableVpnTunnelsListEncapsulationIcParameterInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpnTunnelsListEncapsulationIcParameterInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

