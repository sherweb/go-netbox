/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.2 (4.1)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// WirelessLinkDistanceUnitLabel the model 'WirelessLinkDistanceUnitLabel'
type WirelessLinkDistanceUnitLabel string

// List of WirelessLink_distance_unit_label
const (
	WIRELESSLINKDISTANCEUNITLABEL_KILOMETERS WirelessLinkDistanceUnitLabel = "Kilometers"
	WIRELESSLINKDISTANCEUNITLABEL_METERS WirelessLinkDistanceUnitLabel = "Meters"
	WIRELESSLINKDISTANCEUNITLABEL_MILES WirelessLinkDistanceUnitLabel = "Miles"
	WIRELESSLINKDISTANCEUNITLABEL_FEET WirelessLinkDistanceUnitLabel = "Feet"
)

// All allowed values of WirelessLinkDistanceUnitLabel enum
var AllowedWirelessLinkDistanceUnitLabelEnumValues = []WirelessLinkDistanceUnitLabel{
	"Kilometers",
	"Meters",
	"Miles",
	"Feet",
}

func (v *WirelessLinkDistanceUnitLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WirelessLinkDistanceUnitLabel(value)
	for _, existing := range AllowedWirelessLinkDistanceUnitLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WirelessLinkDistanceUnitLabel", value)
}

// NewWirelessLinkDistanceUnitLabelFromValue returns a pointer to a valid WirelessLinkDistanceUnitLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWirelessLinkDistanceUnitLabelFromValue(v string) (*WirelessLinkDistanceUnitLabel, error) {
	ev := WirelessLinkDistanceUnitLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WirelessLinkDistanceUnitLabel: valid values are %v", v, AllowedWirelessLinkDistanceUnitLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WirelessLinkDistanceUnitLabel) IsValid() bool {
	for _, existing := range AllowedWirelessLinkDistanceUnitLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WirelessLink_distance_unit_label value
func (v WirelessLinkDistanceUnitLabel) Ptr() *WirelessLinkDistanceUnitLabel {
	return &v
}

type NullableWirelessLinkDistanceUnitLabel struct {
	value *WirelessLinkDistanceUnitLabel
	isSet bool
}

func (v NullableWirelessLinkDistanceUnitLabel) Get() *WirelessLinkDistanceUnitLabel {
	return v.value
}

func (v *NullableWirelessLinkDistanceUnitLabel) Set(val *WirelessLinkDistanceUnitLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableWirelessLinkDistanceUnitLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableWirelessLinkDistanceUnitLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWirelessLinkDistanceUnitLabel(val *WirelessLinkDistanceUnitLabel) *NullableWirelessLinkDistanceUnitLabel {
	return &NullableWirelessLinkDistanceUnitLabel{value: val, isSet: true}
}

func (v NullableWirelessLinkDistanceUnitLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWirelessLinkDistanceUnitLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

