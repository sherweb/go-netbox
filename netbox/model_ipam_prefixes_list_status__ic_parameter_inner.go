/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.2 (4.1)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// IpamPrefixesListStatusIcParameterInner the model 'IpamPrefixesListStatusIcParameterInner'
type IpamPrefixesListStatusIcParameterInner string

// List of ipam_prefixes_list_status__ic_parameter_inner
const (
	IPAMPREFIXESLISTSTATUSICPARAMETERINNER_ACTIVE IpamPrefixesListStatusIcParameterInner = "active"
	IPAMPREFIXESLISTSTATUSICPARAMETERINNER_CONTAINER IpamPrefixesListStatusIcParameterInner = "container"
	IPAMPREFIXESLISTSTATUSICPARAMETERINNER_DEPRECATED IpamPrefixesListStatusIcParameterInner = "deprecated"
	IPAMPREFIXESLISTSTATUSICPARAMETERINNER_RESERVED IpamPrefixesListStatusIcParameterInner = "reserved"
)

// All allowed values of IpamPrefixesListStatusIcParameterInner enum
var AllowedIpamPrefixesListStatusIcParameterInnerEnumValues = []IpamPrefixesListStatusIcParameterInner{
	"active",
	"container",
	"deprecated",
	"reserved",
}

func (v *IpamPrefixesListStatusIcParameterInner) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IpamPrefixesListStatusIcParameterInner(value)
	for _, existing := range AllowedIpamPrefixesListStatusIcParameterInnerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IpamPrefixesListStatusIcParameterInner", value)
}

// NewIpamPrefixesListStatusIcParameterInnerFromValue returns a pointer to a valid IpamPrefixesListStatusIcParameterInner
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIpamPrefixesListStatusIcParameterInnerFromValue(v string) (*IpamPrefixesListStatusIcParameterInner, error) {
	ev := IpamPrefixesListStatusIcParameterInner(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IpamPrefixesListStatusIcParameterInner: valid values are %v", v, AllowedIpamPrefixesListStatusIcParameterInnerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IpamPrefixesListStatusIcParameterInner) IsValid() bool {
	for _, existing := range AllowedIpamPrefixesListStatusIcParameterInnerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ipam_prefixes_list_status__ic_parameter_inner value
func (v IpamPrefixesListStatusIcParameterInner) Ptr() *IpamPrefixesListStatusIcParameterInner {
	return &v
}

type NullableIpamPrefixesListStatusIcParameterInner struct {
	value *IpamPrefixesListStatusIcParameterInner
	isSet bool
}

func (v NullableIpamPrefixesListStatusIcParameterInner) Get() *IpamPrefixesListStatusIcParameterInner {
	return v.value
}

func (v *NullableIpamPrefixesListStatusIcParameterInner) Set(val *IpamPrefixesListStatusIcParameterInner) {
	v.value = val
	v.isSet = true
}

func (v NullableIpamPrefixesListStatusIcParameterInner) IsSet() bool {
	return v.isSet
}

func (v *NullableIpamPrefixesListStatusIcParameterInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpamPrefixesListStatusIcParameterInner(val *IpamPrefixesListStatusIcParameterInner) *NullableIpamPrefixesListStatusIcParameterInner {
	return &NullableIpamPrefixesListStatusIcParameterInner{value: val, isSet: true}
}

func (v NullableIpamPrefixesListStatusIcParameterInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpamPrefixesListStatusIcParameterInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

