/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.2 (4.1)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// DcimRacksListStatusIcParameterInner the model 'DcimRacksListStatusIcParameterInner'
type DcimRacksListStatusIcParameterInner string

// List of dcim_racks_list_status__ic_parameter_inner
const (
	DCIMRACKSLISTSTATUSICPARAMETERINNER_ACTIVE DcimRacksListStatusIcParameterInner = "active"
	DCIMRACKSLISTSTATUSICPARAMETERINNER_AVAILABLE DcimRacksListStatusIcParameterInner = "available"
	DCIMRACKSLISTSTATUSICPARAMETERINNER_DEPRECATED DcimRacksListStatusIcParameterInner = "deprecated"
	DCIMRACKSLISTSTATUSICPARAMETERINNER_PLANNED DcimRacksListStatusIcParameterInner = "planned"
	DCIMRACKSLISTSTATUSICPARAMETERINNER_RESERVED DcimRacksListStatusIcParameterInner = "reserved"
)

// All allowed values of DcimRacksListStatusIcParameterInner enum
var AllowedDcimRacksListStatusIcParameterInnerEnumValues = []DcimRacksListStatusIcParameterInner{
	"active",
	"available",
	"deprecated",
	"planned",
	"reserved",
}

func (v *DcimRacksListStatusIcParameterInner) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DcimRacksListStatusIcParameterInner(value)
	for _, existing := range AllowedDcimRacksListStatusIcParameterInnerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DcimRacksListStatusIcParameterInner", value)
}

// NewDcimRacksListStatusIcParameterInnerFromValue returns a pointer to a valid DcimRacksListStatusIcParameterInner
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDcimRacksListStatusIcParameterInnerFromValue(v string) (*DcimRacksListStatusIcParameterInner, error) {
	ev := DcimRacksListStatusIcParameterInner(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DcimRacksListStatusIcParameterInner: valid values are %v", v, AllowedDcimRacksListStatusIcParameterInnerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DcimRacksListStatusIcParameterInner) IsValid() bool {
	for _, existing := range AllowedDcimRacksListStatusIcParameterInnerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to dcim_racks_list_status__ic_parameter_inner value
func (v DcimRacksListStatusIcParameterInner) Ptr() *DcimRacksListStatusIcParameterInner {
	return &v
}

type NullableDcimRacksListStatusIcParameterInner struct {
	value *DcimRacksListStatusIcParameterInner
	isSet bool
}

func (v NullableDcimRacksListStatusIcParameterInner) Get() *DcimRacksListStatusIcParameterInner {
	return v.value
}

func (v *NullableDcimRacksListStatusIcParameterInner) Set(val *DcimRacksListStatusIcParameterInner) {
	v.value = val
	v.isSet = true
}

func (v NullableDcimRacksListStatusIcParameterInner) IsSet() bool {
	return v.isSet
}

func (v *NullableDcimRacksListStatusIcParameterInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDcimRacksListStatusIcParameterInner(val *DcimRacksListStatusIcParameterInner) *NullableDcimRacksListStatusIcParameterInner {
	return &NullableDcimRacksListStatusIcParameterInner{value: val, isSet: true}
}

func (v NullableDcimRacksListStatusIcParameterInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDcimRacksListStatusIcParameterInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

