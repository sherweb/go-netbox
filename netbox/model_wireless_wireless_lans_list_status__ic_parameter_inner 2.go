/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.2 (4.1)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// WirelessWirelessLansListStatusIcParameterInner the model 'WirelessWirelessLansListStatusIcParameterInner'
type WirelessWirelessLansListStatusIcParameterInner string

// List of wireless_wireless_lans_list_status__ic_parameter_inner
const (
	WIRELESSWIRELESSLANSLISTSTATUSICPARAMETERINNER_ACTIVE WirelessWirelessLansListStatusIcParameterInner = "active"
	WIRELESSWIRELESSLANSLISTSTATUSICPARAMETERINNER_DEPRECATED WirelessWirelessLansListStatusIcParameterInner = "deprecated"
	WIRELESSWIRELESSLANSLISTSTATUSICPARAMETERINNER_DISABLED WirelessWirelessLansListStatusIcParameterInner = "disabled"
	WIRELESSWIRELESSLANSLISTSTATUSICPARAMETERINNER_RESERVED WirelessWirelessLansListStatusIcParameterInner = "reserved"
)

// All allowed values of WirelessWirelessLansListStatusIcParameterInner enum
var AllowedWirelessWirelessLansListStatusIcParameterInnerEnumValues = []WirelessWirelessLansListStatusIcParameterInner{
	"active",
	"deprecated",
	"disabled",
	"reserved",
}

func (v *WirelessWirelessLansListStatusIcParameterInner) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WirelessWirelessLansListStatusIcParameterInner(value)
	for _, existing := range AllowedWirelessWirelessLansListStatusIcParameterInnerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WirelessWirelessLansListStatusIcParameterInner", value)
}

// NewWirelessWirelessLansListStatusIcParameterInnerFromValue returns a pointer to a valid WirelessWirelessLansListStatusIcParameterInner
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWirelessWirelessLansListStatusIcParameterInnerFromValue(v string) (*WirelessWirelessLansListStatusIcParameterInner, error) {
	ev := WirelessWirelessLansListStatusIcParameterInner(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WirelessWirelessLansListStatusIcParameterInner: valid values are %v", v, AllowedWirelessWirelessLansListStatusIcParameterInnerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WirelessWirelessLansListStatusIcParameterInner) IsValid() bool {
	for _, existing := range AllowedWirelessWirelessLansListStatusIcParameterInnerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to wireless_wireless_lans_list_status__ic_parameter_inner value
func (v WirelessWirelessLansListStatusIcParameterInner) Ptr() *WirelessWirelessLansListStatusIcParameterInner {
	return &v
}

type NullableWirelessWirelessLansListStatusIcParameterInner struct {
	value *WirelessWirelessLansListStatusIcParameterInner
	isSet bool
}

func (v NullableWirelessWirelessLansListStatusIcParameterInner) Get() *WirelessWirelessLansListStatusIcParameterInner {
	return v.value
}

func (v *NullableWirelessWirelessLansListStatusIcParameterInner) Set(val *WirelessWirelessLansListStatusIcParameterInner) {
	v.value = val
	v.isSet = true
}

func (v NullableWirelessWirelessLansListStatusIcParameterInner) IsSet() bool {
	return v.isSet
}

func (v *NullableWirelessWirelessLansListStatusIcParameterInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWirelessWirelessLansListStatusIcParameterInner(val *WirelessWirelessLansListStatusIcParameterInner) *NullableWirelessWirelessLansListStatusIcParameterInner {
	return &NullableWirelessWirelessLansListStatusIcParameterInner{value: val, isSet: true}
}

func (v NullableWirelessWirelessLansListStatusIcParameterInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWirelessWirelessLansListStatusIcParameterInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

