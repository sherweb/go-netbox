/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.2 (4.1)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// Encryption1 * `aes-128-cbc` - 128-bit AES (CBC) * `aes-128-gcm` - 128-bit AES (GCM) * `aes-192-cbc` - 192-bit AES (CBC) * `aes-192-gcm` - 192-bit AES (GCM) * `aes-256-cbc` - 256-bit AES (CBC) * `aes-256-gcm` - 256-bit AES (GCM) * `3des-cbc` - 3DES * `des-cbc` - DES
type Encryption1 string

// List of Encryption_1
const (
	ENCRYPTION1_AES_128_CBC Encryption1 = "aes-128-cbc"
	ENCRYPTION1_AES_128_GCM Encryption1 = "aes-128-gcm"
	ENCRYPTION1_AES_192_CBC Encryption1 = "aes-192-cbc"
	ENCRYPTION1_AES_192_GCM Encryption1 = "aes-192-gcm"
	ENCRYPTION1_AES_256_CBC Encryption1 = "aes-256-cbc"
	ENCRYPTION1_AES_256_GCM Encryption1 = "aes-256-gcm"
	ENCRYPTION1__3DES_CBC Encryption1 = "3des-cbc"
	ENCRYPTION1_DES_CBC Encryption1 = "des-cbc"
	ENCRYPTION1_EMPTY Encryption1 = ""
)

// All allowed values of Encryption1 enum
var AllowedEncryption1EnumValues = []Encryption1{
	"aes-128-cbc",
	"aes-128-gcm",
	"aes-192-cbc",
	"aes-192-gcm",
	"aes-256-cbc",
	"aes-256-gcm",
	"3des-cbc",
	"des-cbc",
	"",
}

func (v *Encryption1) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Encryption1(value)
	for _, existing := range AllowedEncryption1EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Encryption1", value)
}

// NewEncryption1FromValue returns a pointer to a valid Encryption1
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEncryption1FromValue(v string) (*Encryption1, error) {
	ev := Encryption1(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Encryption1: valid values are %v", v, AllowedEncryption1EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Encryption1) IsValid() bool {
	for _, existing := range AllowedEncryption1EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Encryption_1 value
func (v Encryption1) Ptr() *Encryption1 {
	return &v
}

type NullableEncryption1 struct {
	value *Encryption1
	isSet bool
}

func (v NullableEncryption1) Get() *Encryption1 {
	return v.value
}

func (v *NullableEncryption1) Set(val *Encryption1) {
	v.value = val
	v.isSet = true
}

func (v NullableEncryption1) IsSet() bool {
	return v.isSet
}

func (v *NullableEncryption1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncryption1(val *Encryption1) *NullableEncryption1 {
	return &NullableEncryption1{value: val, isSet: true}
}

func (v NullableEncryption1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncryption1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

