/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.2 (4.1)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// DcimCablesListStatusIcParameterInner the model 'DcimCablesListStatusIcParameterInner'
type DcimCablesListStatusIcParameterInner string

// List of dcim_cables_list_status__ic_parameter_inner
const (
	DCIMCABLESLISTSTATUSICPARAMETERINNER_CONNECTED DcimCablesListStatusIcParameterInner = "connected"
	DCIMCABLESLISTSTATUSICPARAMETERINNER_DECOMMISSIONING DcimCablesListStatusIcParameterInner = "decommissioning"
	DCIMCABLESLISTSTATUSICPARAMETERINNER_PLANNED DcimCablesListStatusIcParameterInner = "planned"
)

// All allowed values of DcimCablesListStatusIcParameterInner enum
var AllowedDcimCablesListStatusIcParameterInnerEnumValues = []DcimCablesListStatusIcParameterInner{
	"connected",
	"decommissioning",
	"planned",
}

func (v *DcimCablesListStatusIcParameterInner) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DcimCablesListStatusIcParameterInner(value)
	for _, existing := range AllowedDcimCablesListStatusIcParameterInnerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DcimCablesListStatusIcParameterInner", value)
}

// NewDcimCablesListStatusIcParameterInnerFromValue returns a pointer to a valid DcimCablesListStatusIcParameterInner
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDcimCablesListStatusIcParameterInnerFromValue(v string) (*DcimCablesListStatusIcParameterInner, error) {
	ev := DcimCablesListStatusIcParameterInner(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DcimCablesListStatusIcParameterInner: valid values are %v", v, AllowedDcimCablesListStatusIcParameterInnerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DcimCablesListStatusIcParameterInner) IsValid() bool {
	for _, existing := range AllowedDcimCablesListStatusIcParameterInnerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to dcim_cables_list_status__ic_parameter_inner value
func (v DcimCablesListStatusIcParameterInner) Ptr() *DcimCablesListStatusIcParameterInner {
	return &v
}

type NullableDcimCablesListStatusIcParameterInner struct {
	value *DcimCablesListStatusIcParameterInner
	isSet bool
}

func (v NullableDcimCablesListStatusIcParameterInner) Get() *DcimCablesListStatusIcParameterInner {
	return v.value
}

func (v *NullableDcimCablesListStatusIcParameterInner) Set(val *DcimCablesListStatusIcParameterInner) {
	v.value = val
	v.isSet = true
}

func (v NullableDcimCablesListStatusIcParameterInner) IsSet() bool {
	return v.isSet
}

func (v *NullableDcimCablesListStatusIcParameterInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDcimCablesListStatusIcParameterInner(val *DcimCablesListStatusIcParameterInner) *NullableDcimCablesListStatusIcParameterInner {
	return &NullableDcimCablesListStatusIcParameterInner{value: val, isSet: true}
}

func (v NullableDcimCablesListStatusIcParameterInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDcimCablesListStatusIcParameterInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

