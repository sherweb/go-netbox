/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.2 (4.1)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// DcimModulesListStatusIcParameterInner the model 'DcimModulesListStatusIcParameterInner'
type DcimModulesListStatusIcParameterInner string

// List of dcim_modules_list_status__ic_parameter_inner
const (
	DCIMMODULESLISTSTATUSICPARAMETERINNER_ACTIVE DcimModulesListStatusIcParameterInner = "active"
	DCIMMODULESLISTSTATUSICPARAMETERINNER_DECOMMISSIONING DcimModulesListStatusIcParameterInner = "decommissioning"
	DCIMMODULESLISTSTATUSICPARAMETERINNER_FAILED DcimModulesListStatusIcParameterInner = "failed"
	DCIMMODULESLISTSTATUSICPARAMETERINNER_OFFLINE DcimModulesListStatusIcParameterInner = "offline"
	DCIMMODULESLISTSTATUSICPARAMETERINNER_PLANNED DcimModulesListStatusIcParameterInner = "planned"
	DCIMMODULESLISTSTATUSICPARAMETERINNER_STAGED DcimModulesListStatusIcParameterInner = "staged"
)

// All allowed values of DcimModulesListStatusIcParameterInner enum
var AllowedDcimModulesListStatusIcParameterInnerEnumValues = []DcimModulesListStatusIcParameterInner{
	"active",
	"decommissioning",
	"failed",
	"offline",
	"planned",
	"staged",
}

func (v *DcimModulesListStatusIcParameterInner) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DcimModulesListStatusIcParameterInner(value)
	for _, existing := range AllowedDcimModulesListStatusIcParameterInnerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DcimModulesListStatusIcParameterInner", value)
}

// NewDcimModulesListStatusIcParameterInnerFromValue returns a pointer to a valid DcimModulesListStatusIcParameterInner
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDcimModulesListStatusIcParameterInnerFromValue(v string) (*DcimModulesListStatusIcParameterInner, error) {
	ev := DcimModulesListStatusIcParameterInner(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DcimModulesListStatusIcParameterInner: valid values are %v", v, AllowedDcimModulesListStatusIcParameterInnerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DcimModulesListStatusIcParameterInner) IsValid() bool {
	for _, existing := range AllowedDcimModulesListStatusIcParameterInnerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to dcim_modules_list_status__ic_parameter_inner value
func (v DcimModulesListStatusIcParameterInner) Ptr() *DcimModulesListStatusIcParameterInner {
	return &v
}

type NullableDcimModulesListStatusIcParameterInner struct {
	value *DcimModulesListStatusIcParameterInner
	isSet bool
}

func (v NullableDcimModulesListStatusIcParameterInner) Get() *DcimModulesListStatusIcParameterInner {
	return v.value
}

func (v *NullableDcimModulesListStatusIcParameterInner) Set(val *DcimModulesListStatusIcParameterInner) {
	v.value = val
	v.isSet = true
}

func (v NullableDcimModulesListStatusIcParameterInner) IsSet() bool {
	return v.isSet
}

func (v *NullableDcimModulesListStatusIcParameterInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDcimModulesListStatusIcParameterInner(val *DcimModulesListStatusIcParameterInner) *NullableDcimModulesListStatusIcParameterInner {
	return &NullableDcimModulesListStatusIcParameterInner{value: val, isSet: true}
}

func (v NullableDcimModulesListStatusIcParameterInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDcimModulesListStatusIcParameterInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

