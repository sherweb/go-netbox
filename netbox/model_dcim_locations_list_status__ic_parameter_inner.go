/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.1.2 (4.1)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// DcimLocationsListStatusIcParameterInner the model 'DcimLocationsListStatusIcParameterInner'
type DcimLocationsListStatusIcParameterInner string

// List of dcim_locations_list_status__ic_parameter_inner
const (
	DCIMLOCATIONSLISTSTATUSICPARAMETERINNER_ACTIVE DcimLocationsListStatusIcParameterInner = "active"
	DCIMLOCATIONSLISTSTATUSICPARAMETERINNER_DECOMMISSIONING DcimLocationsListStatusIcParameterInner = "decommissioning"
	DCIMLOCATIONSLISTSTATUSICPARAMETERINNER_PLANNED DcimLocationsListStatusIcParameterInner = "planned"
	DCIMLOCATIONSLISTSTATUSICPARAMETERINNER_RETIRED DcimLocationsListStatusIcParameterInner = "retired"
	DCIMLOCATIONSLISTSTATUSICPARAMETERINNER_STAGING DcimLocationsListStatusIcParameterInner = "staging"
)

// All allowed values of DcimLocationsListStatusIcParameterInner enum
var AllowedDcimLocationsListStatusIcParameterInnerEnumValues = []DcimLocationsListStatusIcParameterInner{
	"active",
	"decommissioning",
	"planned",
	"retired",
	"staging",
}

func (v *DcimLocationsListStatusIcParameterInner) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DcimLocationsListStatusIcParameterInner(value)
	for _, existing := range AllowedDcimLocationsListStatusIcParameterInnerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DcimLocationsListStatusIcParameterInner", value)
}

// NewDcimLocationsListStatusIcParameterInnerFromValue returns a pointer to a valid DcimLocationsListStatusIcParameterInner
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDcimLocationsListStatusIcParameterInnerFromValue(v string) (*DcimLocationsListStatusIcParameterInner, error) {
	ev := DcimLocationsListStatusIcParameterInner(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DcimLocationsListStatusIcParameterInner: valid values are %v", v, AllowedDcimLocationsListStatusIcParameterInnerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DcimLocationsListStatusIcParameterInner) IsValid() bool {
	for _, existing := range AllowedDcimLocationsListStatusIcParameterInnerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to dcim_locations_list_status__ic_parameter_inner value
func (v DcimLocationsListStatusIcParameterInner) Ptr() *DcimLocationsListStatusIcParameterInner {
	return &v
}

type NullableDcimLocationsListStatusIcParameterInner struct {
	value *DcimLocationsListStatusIcParameterInner
	isSet bool
}

func (v NullableDcimLocationsListStatusIcParameterInner) Get() *DcimLocationsListStatusIcParameterInner {
	return v.value
}

func (v *NullableDcimLocationsListStatusIcParameterInner) Set(val *DcimLocationsListStatusIcParameterInner) {
	v.value = val
	v.isSet = true
}

func (v NullableDcimLocationsListStatusIcParameterInner) IsSet() bool {
	return v.isSet
}

func (v *NullableDcimLocationsListStatusIcParameterInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDcimLocationsListStatusIcParameterInner(val *DcimLocationsListStatusIcParameterInner) *NullableDcimLocationsListStatusIcParameterInner {
	return &NullableDcimLocationsListStatusIcParameterInner{value: val, isSet: true}
}

func (v NullableDcimLocationsListStatusIcParameterInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDcimLocationsListStatusIcParameterInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

